{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "9b45d6ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "import sf_quant.data as sfd\n",
    "import sf_quant.optimizer as sfo\n",
    "import sf_quant.backtester as sfb\n",
    "import sf_quant.performance as sfp\n",
    "import polars as pl\n",
    "import datetime as dt\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import tqdm\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02ef918a",
   "metadata": {},
   "source": [
    "Dataloader requests:\n",
    "* Ask for dlst codes and rets in crsp data loader\n",
    "* Ask for compustat in data loader\n",
    "* Ask for someone to fix crsp data loader bc it is not on grpquant"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "063ac007",
   "metadata": {},
   "source": [
    "Problems\n",
    "- We do not have the same data as CHS\n",
    "- Our target is not exactly same measure as theirs\n",
    "- Our hi-prob of failure stocks perform too well"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c58c0ed3",
   "metadata": {},
   "source": [
    "### Loading in data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c31cc1c",
   "metadata": {},
   "source": [
    "CRSP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "3207ae6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "crsp_pricing = pl.read_csv(\n",
    "    r\"/home/porter77/sf_fall_2025/sf-quant-labs/crsp_pricing.csv\",\n",
    "    infer_schema_length=10000,\n",
    "    schema_overrides={\n",
    "        \"CUSIP\": pl.Utf8,\n",
    "        \"NCUSIP\": pl.Utf8\n",
    "    }\n",
    ")\n",
    "\n",
    "crsp_delisting = pl.read_csv(\n",
    "    r\"/home/porter77/sf_fall_2025/sf-quant-labs/crsp_delisting.csv\",\n",
    "    infer_schema_length=10000,\n",
    "    schema_overrides={\n",
    "        \"CUSIP\": pl.Utf8,\n",
    "        \"NCUSIP\": pl.Utf8\n",
    "    }\n",
    ")\n",
    "\n",
    "crsp=crsp_pricing.join(crsp_delisting,on=['date','PERMNO','CUSIP'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6d2692e",
   "metadata": {},
   "source": [
    "COMPUSTAT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "6b1d7cd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "compustat = pl.read_csv(\n",
    "    r'/home/porter77/sf_fall_2025/sf-quant-labs/compustat_updated.csv',\n",
    "    infer_schema_length=10000,\n",
    "    schema_overrides={\n",
    "        \"GVKEY\": pl.Utf8,\n",
    "        \"CUSIP\": pl.Utf8,\n",
    "        \"TIC\": pl.Utf8,\n",
    "        \"CONM\": pl.Utf8\n",
    "    }\n",
    ")\n",
    "#get the compustat to crsp link\n",
    "link=pl.read_csv(r'/home/porter77/sf_fall_2025/sf-quant-labs/link.csv')\n",
    "\n",
    "link=link.rename({'LPERMNO':'PERMNO','GVKEY':'gvkey'})\n",
    "compustat=compustat.join(link,on=['gvkey','cusip'])\n",
    "compustat=compustat.rename({'datadate':'date'})\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "ba4cec85",
   "metadata": {},
   "outputs": [],
   "source": [
    "#merge compustat and crsp\n",
    "data=crsp.join(compustat,on=['PERMNO','date'],how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c82776e5",
   "metadata": {},
   "source": [
    "Get SP500 data for Size for exret factors in logit\n",
    "\n",
    "- SP500 RET\n",
    "- SP MKT CAP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "43bfad73",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (720, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>caldt</th><th>totval</th><th>totcnt</th><th>usdval</th><th>spindx</th><th>sprtrn</th><th>caldt_date</th><th>date</th></tr><tr><td>str</td><td>f64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>date</td><td>date</td></tr></thead><tbody><tr><td>&quot;1965-01-29&quot;</td><td>3.95720841e8</td><td>500</td><td>3.82744572e8</td><td>87.56</td><td>0.033156</td><td>1965-01-29</td><td>1965-01-31</td></tr><tr><td>&quot;1965-02-26&quot;</td><td>3.9533372e8</td><td>500</td><td>3.95650685e8</td><td>87.43</td><td>-0.001485</td><td>1965-02-26</td><td>1965-02-28</td></tr><tr><td>&quot;1965-03-31&quot;</td><td>3.90352723e8</td><td>500</td><td>3.95771034e8</td><td>86.16</td><td>-0.014526</td><td>1965-03-31</td><td>1965-03-31</td></tr><tr><td>&quot;1965-04-30&quot;</td><td>4.04184764e8</td><td>500</td><td>3.90352723e8</td><td>89.11</td><td>0.034239</td><td>1965-04-30</td><td>1965-04-30</td></tr><tr><td>&quot;1965-05-28&quot;</td><td>4.00798168e8</td><td>500</td><td>4.04184764e8</td><td>88.42</td><td>-0.007743</td><td>1965-05-28</td><td>1965-05-31</td></tr><tr><td>&quot;1965-06-30&quot;</td><td>3.817766e8</td><td>500</td><td>4.01185245e8</td><td>84.12</td><td>-0.048632</td><td>1965-06-30</td><td>1965-06-30</td></tr><tr><td>&quot;1965-07-30&quot;</td><td>3.87024297e8</td><td>500</td><td>3.817766e8</td><td>85.25</td><td>0.013433</td><td>1965-07-30</td><td>1965-07-31</td></tr><tr><td>&quot;1965-08-31&quot;</td><td>3.95722071e8</td><td>500</td><td>3.87024297e8</td><td>87.17</td><td>0.022522</td><td>1965-08-31</td><td>1965-08-31</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>&quot;2024-06-28&quot;</td><td>4.7796e10</td><td>503</td><td>4.6162e10</td><td>5460.48</td><td>0.03467</td><td>2024-06-28</td><td>2024-06-30</td></tr><tr><td>&quot;2024-07-31&quot;</td><td>4.8316e10</td><td>503</td><td>4.7783e10</td><td>5522.3</td><td>0.011321</td><td>2024-07-31</td><td>2024-07-31</td></tr><tr><td>&quot;2024-08-30&quot;</td><td>4.9375e10</td><td>503</td><td>4.8316e10</td><td>5648.4</td><td>0.022835</td><td>2024-08-30</td><td>2024-08-31</td></tr><tr><td>&quot;2024-09-30&quot;</td><td>5.0545e10</td><td>504</td><td>4.9481e10</td><td>5762.48</td><td>0.020197</td><td>2024-09-30</td><td>2024-09-30</td></tr><tr><td>&quot;2024-10-31&quot;</td><td>5.0033e10</td><td>503</td><td>5.0538e10</td><td>5705.45</td><td>-0.009897</td><td>2024-10-31</td><td>2024-10-31</td></tr><tr><td>&quot;2024-11-29&quot;</td><td>5.3001e10</td><td>503</td><td>5.0044e10</td><td>6032.38</td><td>0.057301</td><td>2024-11-29</td><td>2024-11-30</td></tr><tr><td>&quot;2024-12-31&quot;</td><td>5.1866e10</td><td>503</td><td>5.3154e10</td><td>5881.63</td><td>-0.02499</td><td>2024-12-31</td><td>2024-12-31</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (720, 8)\n",
       "┌────────────┬──────────────┬────────┬─────────────┬─────────┬───────────┬────────────┬────────────┐\n",
       "│ caldt      ┆ totval       ┆ totcnt ┆ usdval      ┆ spindx  ┆ sprtrn    ┆ caldt_date ┆ date       │\n",
       "│ ---        ┆ ---          ┆ ---    ┆ ---         ┆ ---     ┆ ---       ┆ ---        ┆ ---        │\n",
       "│ str        ┆ f64          ┆ i64    ┆ f64         ┆ f64     ┆ f64       ┆ date       ┆ date       │\n",
       "╞════════════╪══════════════╪════════╪═════════════╪═════════╪═══════════╪════════════╪════════════╡\n",
       "│ 1965-01-29 ┆ 3.95720841e8 ┆ 500    ┆ 3.82744572e ┆ 87.56   ┆ 0.033156  ┆ 1965-01-29 ┆ 1965-01-31 │\n",
       "│            ┆              ┆        ┆ 8           ┆         ┆           ┆            ┆            │\n",
       "│ 1965-02-26 ┆ 3.9533372e8  ┆ 500    ┆ 3.95650685e ┆ 87.43   ┆ -0.001485 ┆ 1965-02-26 ┆ 1965-02-28 │\n",
       "│            ┆              ┆        ┆ 8           ┆         ┆           ┆            ┆            │\n",
       "│ 1965-03-31 ┆ 3.90352723e8 ┆ 500    ┆ 3.95771034e ┆ 86.16   ┆ -0.014526 ┆ 1965-03-31 ┆ 1965-03-31 │\n",
       "│            ┆              ┆        ┆ 8           ┆         ┆           ┆            ┆            │\n",
       "│ 1965-04-30 ┆ 4.04184764e8 ┆ 500    ┆ 3.90352723e ┆ 89.11   ┆ 0.034239  ┆ 1965-04-30 ┆ 1965-04-30 │\n",
       "│            ┆              ┆        ┆ 8           ┆         ┆           ┆            ┆            │\n",
       "│ 1965-05-28 ┆ 4.00798168e8 ┆ 500    ┆ 4.04184764e ┆ 88.42   ┆ -0.007743 ┆ 1965-05-28 ┆ 1965-05-31 │\n",
       "│            ┆              ┆        ┆ 8           ┆         ┆           ┆            ┆            │\n",
       "│ 1965-06-30 ┆ 3.817766e8   ┆ 500    ┆ 4.01185245e ┆ 84.12   ┆ -0.048632 ┆ 1965-06-30 ┆ 1965-06-30 │\n",
       "│            ┆              ┆        ┆ 8           ┆         ┆           ┆            ┆            │\n",
       "│ 1965-07-30 ┆ 3.87024297e8 ┆ 500    ┆ 3.817766e8  ┆ 85.25   ┆ 0.013433  ┆ 1965-07-30 ┆ 1965-07-31 │\n",
       "│ 1965-08-31 ┆ 3.95722071e8 ┆ 500    ┆ 3.87024297e ┆ 87.17   ┆ 0.022522  ┆ 1965-08-31 ┆ 1965-08-31 │\n",
       "│            ┆              ┆        ┆ 8           ┆         ┆           ┆            ┆            │\n",
       "│ …          ┆ …            ┆ …      ┆ …           ┆ …       ┆ …         ┆ …          ┆ …          │\n",
       "│ 2024-06-28 ┆ 4.7796e10    ┆ 503    ┆ 4.6162e10   ┆ 5460.48 ┆ 0.03467   ┆ 2024-06-28 ┆ 2024-06-30 │\n",
       "│ 2024-07-31 ┆ 4.8316e10    ┆ 503    ┆ 4.7783e10   ┆ 5522.3  ┆ 0.011321  ┆ 2024-07-31 ┆ 2024-07-31 │\n",
       "│ 2024-08-30 ┆ 4.9375e10    ┆ 503    ┆ 4.8316e10   ┆ 5648.4  ┆ 0.022835  ┆ 2024-08-30 ┆ 2024-08-31 │\n",
       "│ 2024-09-30 ┆ 5.0545e10    ┆ 504    ┆ 4.9481e10   ┆ 5762.48 ┆ 0.020197  ┆ 2024-09-30 ┆ 2024-09-30 │\n",
       "│ 2024-10-31 ┆ 5.0033e10    ┆ 503    ┆ 5.0538e10   ┆ 5705.45 ┆ -0.009897 ┆ 2024-10-31 ┆ 2024-10-31 │\n",
       "│ 2024-11-29 ┆ 5.3001e10    ┆ 503    ┆ 5.0044e10   ┆ 6032.38 ┆ 0.057301  ┆ 2024-11-29 ┆ 2024-11-30 │\n",
       "│ 2024-12-31 ┆ 5.1866e10    ┆ 503    ┆ 5.3154e10   ┆ 5881.63 ┆ -0.02499  ┆ 2024-12-31 ┆ 2024-12-31 │\n",
       "└────────────┴──────────────┴────────┴─────────────┴─────────┴───────────┴────────────┴────────────┘"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#get \n",
    "sp500=pl.read_csv(r'/home/porter77/sf_fall_2025/sf-quant-labs/sp500.csv')\n",
    "\n",
    "sp500 = sp500.with_columns(\n",
    "    pl.col(\"caldt\").str.strptime(pl.Date, format=\"%Y-%m-%d\").alias(\"caldt_date\")\n",
    ")\n",
    "\n",
    "# 2. Create a \"date\" column set to the month-end\n",
    "sp500 = sp500.with_columns(\n",
    "    pl.col(\"caldt_date\").dt.month_end().alias(\"date\")\n",
    ")\n",
    "sp500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "871d49a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#make date a dt.date so it can match with sp500\n",
    "data = data.with_columns(\n",
    "    pl.col(\"date\").str.strptime(pl.Date, format=\"%Y-%m-%d\").alias(\"date\")\n",
    ")\n",
    "\n",
    "data=data.join(sp500,on='date')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bf1f5f7",
   "metadata": {},
   "source": [
    "### Signal Construction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1d11bd6",
   "metadata": {},
   "source": [
    "#### Cleaning and Defining Vars"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca2b63d8",
   "metadata": {},
   "source": [
    "##### Adding Delisted return"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c9029d2",
   "metadata": {},
   "source": [
    "\"Because we are studying the returns to distressed stocks, it is important to handle carefully the returns to stocks that are delisted and thus disappear from the CRSP database. In many cases, CRSP reports a delisting return for the final month of the firm’s life; we have 6,481 such delisting returns in our sample and we use them where they are available. Otherwise, we use the last available full-month return in CRSP. In some cases, this effectively assumes that our portfolios sell distressed stocks at the end of the month before delisting, which imparts an upward bias to the returns on distressed-stock portfolios (Shumway (1997) and Shumway and Warther (1999)).13 We assume that the proceeds from sales of delisted stocks are reinvested in each portfolio in proportion to the weights of the remaining stocks in the portfolio. In a few cases, stocks are delisted and then re-enter the database, but we do not include these stocks in the sample after the first delisting. We treat firms that fail as equivalent to delisted firms, even if CRSP continues to report returns for these firms. That is,our portfolios sell stocks of companies that fail and we use the latest available CRSP data to calculate a final return on such stocks.\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcbecc2c",
   "metadata": {},
   "source": [
    "We do not restrict the crosssection of firms to include only share codes 10 and 11, as Hong, Lim, and Stein (2000) do, but we\n",
    "have checked that all of our results are robust to such a restriction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "f85167fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#filter to shrcd 10,11\n",
    "data = data.filter(pl.col(\"SHRCD\").is_in([10, 11])).sort([\"PERMNO\", \"date\"])\n",
    "\n",
    "#cast dlret to float\n",
    "data = data.with_columns(\n",
    "    (pl.col('DLRET').cast(pl.Float32,strict=False)).alias('DLRET')\n",
    ")\n",
    "#cast ret o float\n",
    "data=data.with_columns(\n",
    "    (pl.col('RET').cast(pl.Float32,strict=False)).alias('RET')\n",
    ")\n",
    "\n",
    "#use dlret for ret when no ret exists\n",
    "data=data.with_columns(\n",
    "    pl.when((pl.col('RET').is_null()) & (pl.col('DLRET').is_not_null()))\n",
    "    .then(pl.col('DLRET'))\n",
    "    .otherwise(pl.col('RET'))\n",
    "    .alias('RET')\n",
    ")\n",
    "\n",
    "#multiply them to get the total return for that month\n",
    "data=data.with_columns(\n",
    "    pl.when((pl.col('RET').is_not_null()) & (pl.col('DLRET').is_not_null()))\n",
    "    .then(\n",
    "        ((pl.col('RET')+1)* (1+pl.col('DLRET')))-1\n",
    "\n",
    "    )\n",
    "    .otherwise(pl.col('RET'))\n",
    "    .alias('RET')\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74ff06c6",
   "metadata": {},
   "source": [
    "##### Defining Vars"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88a380c4",
   "metadata": {},
   "source": [
    "$$\n",
    "\\text{Total Assets (adjusted)}_{i,t} = TA_{i,t} + 0.1 \\big( ME_{i,t} - BE_{i,t} \\big)\n",
    "\n",
    "$$\n",
    "$$\n",
    "\\text{Market-to-Book}_{i,t} \\;=\\; \\frac{\\text{Market Equity}_{i,t}}{\\text{Book Equity}_{i,t}}\n",
    "\n",
    "\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "37540a8f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#we lag any accounting data by 2 months\n",
    "\n",
    "#sort before shifting\n",
    "data = data.sort([\"PERMNO\", \"date\"])\n",
    "\n",
    "#first make book equity\n",
    "#seqq and all the other stuff is apparently in millions\n",
    "\n",
    "data = data.with_columns(\n",
    "    (((pl.col(\"seqq\") + pl.col(\"txditcq\").fill_null(0) - pl.col(\"pstkrq\"))*1000000).shift(2).over('PERMNO'))\n",
    "    .alias(\"beq\")\n",
    ")##dollars\n",
    "\n",
    "# data = data.with_columns(\n",
    "#     pl.when(pl.col(\"beq\") <= 0).then(pl.lit(1.0)).otherwise(pl.col(\"beq\")).alias(\"beq_floor\")\n",
    "# )\n",
    "\n",
    "#make price always postiive\n",
    "data = data.with_columns(\n",
    "    pl.col(\"PRC\").abs().alias(\"PRC\")\n",
    ")\n",
    "\n",
    "#now make the market equity\n",
    "data = data.with_columns(\n",
    "    (pl.col(\"PRC\") * (pl.col(\"SHROUT\")*1000))\n",
    "    .alias(\"meq\")\n",
    ")#dollars\n",
    "\n",
    "data = data.sort([\"PERMNO\", \"date\"])\n",
    "#make total assets adjusted\n",
    "data = data.with_columns(\n",
    "    (((pl.col(\"atq\")*1000000).shift(2).over('PERMNO')).fill_null(0) + (0.1 * (pl.col(\"meq\") - pl.col(\"beq\").fill_null(0))))\n",
    "    .alias(\"taq_adjusted\")\n",
    ")#dollars\n",
    "\n",
    "#make M/B\n",
    "\n",
    "data=data.with_columns(\n",
    "    (pl.col('meq')/pl.col('beq')).alias('mbq')\n",
    ")#dollars\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "661cdec7",
   "metadata": {},
   "source": [
    "Make the rest of the Factors"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c28a4617",
   "metadata": {},
   "source": [
    "$$\n",
    "RSIZE_{i,t} = \\log \\left( \\frac{\\text{Firm Market Equity}_{i,t}}{\\text{Total S\\&P500 Market Value}_{t}} \\right)\n",
    "$$\n",
    "\n",
    "$$\n",
    "EXRET_{i,t} = \\log(1+R_{i,t}) - \\log(1+R_{S\\&P500,t})\n",
    "$$\n",
    "\n",
    "$$\n",
    "NITA_{i,t} = \\frac{\\text{Net Income}_{i,t}}{\\text{Total Assets (adjusted)}_{i,t}}\n",
    "$$\n",
    "\n",
    "$$\n",
    "TLTA_{i,t} = \\frac{\\text{Total Liabilities}_{i,t}}{\\text{Total Assets (adjusted)}_{i,t}}\n",
    "$$\n",
    "\n",
    "$$\n",
    "NIMTA_{i,t} = \\frac{\\text{Net Income}_{i,t}}{\\text{Firm Market Equity}_{i,t} + \\text{Total Liabilities}_{i,t}}\n",
    "$$\n",
    "\n",
    "$$\n",
    "TLMTA_{i,t} = \\frac{\\text{Total Liabilities}_{i,t}}{\\text{Firm Market Equity}_{i,t} + \\text{Total Liabilities}_{i,t}}\n",
    "$$\n",
    "\n",
    "$$\n",
    "CASHMTA_{i,t} = \\frac{\\text{Cash and Short Term Investments}_{i,t}}{\\text{Firm Market Equity}_{i,t} + \\text{Total Liabilities}_{i,t}}\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "b6e3fd8a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#making rsize\n",
    "#total value is in 1000's\n",
    "data=data.with_columns(\n",
    "    ((pl.col('meq')/(pl.col('totval')*1000)).log()).alias('rsize')\n",
    ")#dollars logged\n",
    "\n",
    "#cleaning RET (making them all numbers)\n",
    "\n",
    "#######################################################################\n",
    "#added the .000001 so it is not nan idk if CHS do this\n",
    "#exret\n",
    "data = data.with_columns(\n",
    "    ( ((1.00000001 + pl.col(\"RET\")).log()) - ((1 + pl.col(\"sprtrn\")).log())).alias(\"exret\")\n",
    ")\n",
    "########################################################################\n",
    "\n",
    "\n",
    "\n",
    "data = data.sort([\"PERMNO\", \"date\"])\n",
    "#NIMTA\n",
    "data=data.with_columns(\n",
    "    (((pl.col('niq')*1000000).shift(2).over('PERMNO'))/(pl.col('meq')+((pl.col('ltq')*1000000).shift(2).over('PERMNO')))).alias('nimta')\n",
    ")\n",
    "\n",
    "# i had chat write these two bc i didnt want to write it out myself\n",
    "data = data.sort([\"PERMNO\", \"date\"])\n",
    "#TLMTA\n",
    "data = data.with_columns(\n",
    "    (\n",
    "        (pl.col(\"ltq\") * 1_000_000).shift(2).over(\"PERMNO\")\n",
    "        / (pl.col(\"meq\") + (pl.col(\"ltq\") * 1_000_000).shift(2).over(\"PERMNO\"))\n",
    "    ).alias(\"tlmta\")\n",
    ")\n",
    "data = data.sort([\"PERMNO\", \"date\"])\n",
    "#CSHMTA\n",
    "data = data.with_columns(\n",
    "    (\n",
    "        (pl.col(\"cheq\") * 1_000_000).shift(2).over(\"PERMNO\")\n",
    "        / (pl.col(\"meq\") + (pl.col(\"ltq\") * 1_000_000).shift(2).over(\"PERMNO\"))\n",
    "    ).alias(\"cshmta\")\n",
    ")\n",
    "data = data.sort([\"PERMNO\", \"date\"])\n",
    "#NITA\n",
    "data=data.with_columns(\n",
    "   ( (pl.col('niq')* 1_000_000).shift(2).over(\"PERMNO\")\n",
    "    / ((pl.col('taq_adjusted')).shift(2).over('PERMNO'))).alias('nita')\n",
    ")\n",
    "\n",
    "data = data.sort([\"PERMNO\", \"date\"])\n",
    "#TLTA\n",
    "data=data.with_columns(\n",
    "    ((pl.col('ltq')* 1_000_000).shift(2).over(\"PERMNO\")\n",
    "    / ((pl.col('taq_adjusted')).shift(2).over('PERMNO'))).alias('tlta')\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "c52d71c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#fill in nita and tlta\n",
    "\n",
    "data = data.with_columns([\n",
    "    pl.col(\"nita\").fill_null(\n",
    "        pl.col(\"nita\").mean().over(\"date\")\n",
    "    ).alias(\"nita\"),\n",
    "\n",
    "    pl.col(\"tlta\").fill_null(\n",
    "        pl.col(\"tlta\").mean().over(\"date\")\n",
    "    ).alias(\"tlta\")\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bc53510",
   "metadata": {},
   "source": [
    "$$\n",
    "SIGMA_{i,t-1,t-3} \\;=\\;\n",
    "\\left( 252 \\cdot \\frac{1}{N-1} \n",
    "\\sum_{k \\in \\{t-1, t-2, t-3\\}} r_{i,k}^2 \\right)^{\\tfrac{1}{2}}.\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "a71f5b8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#getting sigma\n",
    "crsp_daily=pl.read_csv(r'/home/porter77/sf_fall_2025/sf-quant-labs/crsp_daily.csv')\n",
    "\n",
    "\n",
    "#do some cleaning\n",
    "crsp_daily=crsp_daily.with_columns(\n",
    "    (pl.col('PRC').abs()).alias('PRC')\n",
    ")\n",
    "crsp_daily=crsp_daily.with_columns(\n",
    "    pl.col('RET').cast(pl.Float32,strict=False)\n",
    ")\n",
    "\n",
    "crsp_daily = crsp_daily.with_columns(\n",
    "    pl.col(\"date\").str.strptime(pl.Date, format=\"%Y-%m-%d\").alias(\"date\")\n",
    ")\n",
    "\n",
    "crsp_daily=crsp_daily.sort(['PERMNO','date'])\n",
    "crsp_daily=crsp_daily.with_columns(\n",
    "    (pl.col('RET').rolling_std(63).over('PERMNO')).alias('std_3mo')  #63 trading days in 3 month\n",
    ")\n",
    "crsp_daily = crsp_daily.with_columns(\n",
    "    (pl.col(\"std_3mo\") * (252**0.5)).alias('sigma_ann')\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "901ed550",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (97_495_634, 7)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>PERMNO</th><th>date</th><th>PRC</th><th>RET</th><th>RETX</th><th>std_3mo</th><th>sigma_ann</th></tr><tr><td>i64</td><td>date</td><td>f64</td><td>f32</td><td>str</td><td>f32</td><td>f32</td></tr></thead><tbody><tr><td>10000</td><td>1986-01-06</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td></tr><tr><td>10000</td><td>1986-01-07</td><td>2.5625</td><td>null</td><td>&quot;C&quot;</td><td>null</td><td>null</td></tr><tr><td>10000</td><td>1986-01-08</td><td>2.5</td><td>-0.02439</td><td>&quot;-0.024390&quot;</td><td>null</td><td>null</td></tr><tr><td>10000</td><td>1986-01-09</td><td>2.5</td><td>0.0</td><td>&quot;0.000000&quot;</td><td>null</td><td>null</td></tr><tr><td>10000</td><td>1986-01-10</td><td>2.5</td><td>0.0</td><td>&quot;0.000000&quot;</td><td>null</td><td>null</td></tr><tr><td>10000</td><td>1986-01-13</td><td>2.625</td><td>0.05</td><td>&quot;0.050000&quot;</td><td>null</td><td>null</td></tr><tr><td>10000</td><td>1986-01-14</td><td>2.75</td><td>0.047619</td><td>&quot;0.047619&quot;</td><td>null</td><td>null</td></tr><tr><td>10000</td><td>1986-01-15</td><td>2.875</td><td>0.045455</td><td>&quot;0.045455&quot;</td><td>null</td><td>null</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>93436</td><td>2024-12-20</td><td>421.06</td><td>-0.034642</td><td>&quot;-0.034642&quot;</td><td>0.047827</td><td>0.75923</td></tr><tr><td>93436</td><td>2024-12-23</td><td>430.60001</td><td>0.022657</td><td>&quot;0.022657&quot;</td><td>0.047847</td><td>0.759542</td></tr><tr><td>93436</td><td>2024-12-24</td><td>462.28</td><td>0.073572</td><td>&quot;0.073572&quot;</td><td>0.048524</td><td>0.770289</td></tr><tr><td>93436</td><td>2024-12-26</td><td>454.13</td><td>-0.01763</td><td>&quot;-0.017630&quot;</td><td>0.048579</td><td>0.771166</td></tr><tr><td>93436</td><td>2024-12-27</td><td>431.66</td><td>-0.049479</td><td>&quot;-0.049479&quot;</td><td>0.049122</td><td>0.779793</td></tr><tr><td>93436</td><td>2024-12-30</td><td>417.41</td><td>-0.033012</td><td>&quot;-0.033012&quot;</td><td>0.049407</td><td>0.784304</td></tr><tr><td>93436</td><td>2024-12-31</td><td>403.84</td><td>-0.03251</td><td>&quot;-0.032510&quot;</td><td>0.049599</td><td>0.787362</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (97_495_634, 7)\n",
       "┌────────┬────────────┬───────────┬───────────┬───────────┬──────────┬───────────┐\n",
       "│ PERMNO ┆ date       ┆ PRC       ┆ RET       ┆ RETX      ┆ std_3mo  ┆ sigma_ann │\n",
       "│ ---    ┆ ---        ┆ ---       ┆ ---       ┆ ---       ┆ ---      ┆ ---       │\n",
       "│ i64    ┆ date       ┆ f64       ┆ f32       ┆ str       ┆ f32      ┆ f32       │\n",
       "╞════════╪════════════╪═══════════╪═══════════╪═══════════╪══════════╪═══════════╡\n",
       "│ 10000  ┆ 1986-01-06 ┆ null      ┆ null      ┆ null      ┆ null     ┆ null      │\n",
       "│ 10000  ┆ 1986-01-07 ┆ 2.5625    ┆ null      ┆ C         ┆ null     ┆ null      │\n",
       "│ 10000  ┆ 1986-01-08 ┆ 2.5       ┆ -0.02439  ┆ -0.024390 ┆ null     ┆ null      │\n",
       "│ 10000  ┆ 1986-01-09 ┆ 2.5       ┆ 0.0       ┆ 0.000000  ┆ null     ┆ null      │\n",
       "│ 10000  ┆ 1986-01-10 ┆ 2.5       ┆ 0.0       ┆ 0.000000  ┆ null     ┆ null      │\n",
       "│ 10000  ┆ 1986-01-13 ┆ 2.625     ┆ 0.05      ┆ 0.050000  ┆ null     ┆ null      │\n",
       "│ 10000  ┆ 1986-01-14 ┆ 2.75      ┆ 0.047619  ┆ 0.047619  ┆ null     ┆ null      │\n",
       "│ 10000  ┆ 1986-01-15 ┆ 2.875     ┆ 0.045455  ┆ 0.045455  ┆ null     ┆ null      │\n",
       "│ …      ┆ …          ┆ …         ┆ …         ┆ …         ┆ …        ┆ …         │\n",
       "│ 93436  ┆ 2024-12-20 ┆ 421.06    ┆ -0.034642 ┆ -0.034642 ┆ 0.047827 ┆ 0.75923   │\n",
       "│ 93436  ┆ 2024-12-23 ┆ 430.60001 ┆ 0.022657  ┆ 0.022657  ┆ 0.047847 ┆ 0.759542  │\n",
       "│ 93436  ┆ 2024-12-24 ┆ 462.28    ┆ 0.073572  ┆ 0.073572  ┆ 0.048524 ┆ 0.770289  │\n",
       "│ 93436  ┆ 2024-12-26 ┆ 454.13    ┆ -0.01763  ┆ -0.017630 ┆ 0.048579 ┆ 0.771166  │\n",
       "│ 93436  ┆ 2024-12-27 ┆ 431.66    ┆ -0.049479 ┆ -0.049479 ┆ 0.049122 ┆ 0.779793  │\n",
       "│ 93436  ┆ 2024-12-30 ┆ 417.41    ┆ -0.033012 ┆ -0.033012 ┆ 0.049407 ┆ 0.784304  │\n",
       "│ 93436  ┆ 2024-12-31 ┆ 403.84    ┆ -0.03251  ┆ -0.032510 ┆ 0.049599 ┆ 0.787362  │\n",
       "└────────┴────────────┴───────────┴───────────┴───────────┴──────────┴───────────┘"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "crsp_daily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "c56757f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "#i think I prolly could have just used monthly data for this bc now i have to align it back to my other data\n",
    "#so here is chats code for doing that\n",
    "\n",
    "# 5) align to month end (keep as-is)\n",
    "crsp_daily = crsp_daily.with_columns(pl.col(\"date\").dt.month_end().alias(\"date\"))\n",
    "\n",
    "# 6) collapse: take the last NON-NULL sigma in each month\n",
    "sigma_m = (\n",
    "    crsp_daily\n",
    "    .group_by([\"PERMNO\", \"date\"])\n",
    "    .agg(pl.col(\"sigma_ann\").drop_nulls().last().alias(\"sigma\"))\n",
    ")\n",
    "\n",
    "#fill remaining nulls with same-month cross sectional mean\n",
    "sigma_cs = sigma_m.group_by(\"date\").agg(pl.col(\"sigma\").mean().alias(\"sigma_cs_mean\"))\n",
    "sigma_m = (\n",
    "    sigma_m.join(sigma_cs, on=\"date\", how=\"left\")\n",
    "           .with_columns(\n",
    "               pl.coalesce([pl.col(\"sigma\"), pl.col(\"sigma_cs_mean\")]).alias(\"sigma\")\n",
    "           )\n",
    "           .drop(\"sigma_cs_mean\")\n",
    ")\n",
    "\n",
    "# # then join sigma_m back to your monthly panel `data` on [PERMNO, date]\n",
    "# data = data.join(sigma_m, on=[\"PERMNO\", \"date\"], how=\"left\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "ff26628b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#merge sigma_m to my data\n",
    "data=data.join(sigma_m,on=['PERMNO','date'],how='left')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aaba4f2",
   "metadata": {},
   "source": [
    "##### Winsorizing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "b6e73a4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variables to winsorize\n",
    "vars_to_winsor = [\n",
    "    \"nita\",        \n",
    "    \"tlta\",\n",
    "    \"exret\",\n",
    "    \"sigma\",\n",
    "    \"rsize\"\n",
    "]\n",
    "\n",
    "# 1. Clean infinities -> null so they don't pollute quantiles\n",
    "data = data.with_columns([\n",
    "    pl.when(pl.col(c).is_infinite())\n",
    "      .then(None)\n",
    "      .otherwise(pl.col(c))\n",
    "      .alias(c)\n",
    "    for c in vars_to_winsor\n",
    "])\n",
    "\n",
    "# 2. Compute pooled 5% / 95% cutoffs\n",
    "qdf = data.select(\n",
    "    *[pl.col(c).quantile(0.05).alias(f\"{c}_lo\") for c in vars_to_winsor],\n",
    "    *[pl.col(c).quantile(0.95).alias(f\"{c}_hi\") for c in vars_to_winsor],\n",
    ").to_dicts()[0]\n",
    "\n",
    "# 3. Apply winsorization; keep originals, add *_w columns\n",
    "for c in vars_to_winsor:\n",
    "    lo = qdf[f\"{c}_lo\"]\n",
    "    hi = qdf[f\"{c}_hi\"]\n",
    "    data = data.with_columns(\n",
    "        pl.when(pl.col(c) < lo).then(lo)\n",
    "         .when(pl.col(c) > hi).then(hi)\n",
    "         .otherwise(pl.col(c))\n",
    "         .alias(f\"{c}_w\")\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62b8be6a",
   "metadata": {},
   "source": [
    "#### Define Target Var"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28e8aea0",
   "metadata": {},
   "source": [
    "consult for the delisting codes:\n",
    "https://wrds-www.wharton.upenn.edu/documents/399/Data_Descriptions_Guide.pdf\n",
    "on page 131"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "4fdec8e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define failure codes\n",
    "failure_codes = [552, 560, 561, 572, 574, 580, 581, 582, 583, 584, 585, 586, 587, 591]\n",
    "# failure_codes = [560,574,552]\n",
    "# failure_codes=range(550,600)\n",
    "# failure_codes=[574]\n",
    "# failure_codes=[591]\n",
    "\n",
    "\n",
    "data = data.with_columns(\n",
    "    pl.col(\"DLSTCD\")\n",
    "      .is_in(failure_codes)\n",
    "      .fill_null(False)           \n",
    "      .cast(pl.Int8)              \n",
    "      .alias(\"failure\")\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "b9018196",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common: DLSTCD=560  count=791  share=22.12%\n",
      "shape: (1, 2)\n",
      "┌────────────┬──────────────┐\n",
      "│ rows_total ┆ rows_failure │\n",
      "│ ---        ┆ ---          │\n",
      "│ u32        ┆ u32          │\n",
      "╞════════════╪══════════════╡\n",
      "│ 2561893    ┆ 4645         │\n",
      "└────────────┴──────────────┘\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (12, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>DLSTCD</th><th>n</th><th>share</th></tr><tr><td>i64</td><td>u32</td><td>f64</td></tr></thead><tbody><tr><td>552</td><td>556</td><td>0.155481</td></tr><tr><td>560</td><td>791</td><td>0.221197</td></tr><tr><td>561</td><td>429</td><td>0.119966</td></tr><tr><td>574</td><td>394</td><td>0.110179</td></tr><tr><td>580</td><td>603</td><td>0.168624</td></tr><tr><td>581</td><td>51</td><td>0.014262</td></tr><tr><td>582</td><td>103</td><td>0.028803</td></tr><tr><td>583</td><td>10</td><td>0.002796</td></tr><tr><td>584</td><td>553</td><td>0.154642</td></tr><tr><td>585</td><td>61</td><td>0.017058</td></tr><tr><td>587</td><td>6</td><td>0.001678</td></tr><tr><td>591</td><td>19</td><td>0.005313</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (12, 3)\n",
       "┌────────┬─────┬──────────┐\n",
       "│ DLSTCD ┆ n   ┆ share    │\n",
       "│ ---    ┆ --- ┆ ---      │\n",
       "│ i64    ┆ u32 ┆ f64      │\n",
       "╞════════╪═════╪══════════╡\n",
       "│ 552    ┆ 556 ┆ 0.155481 │\n",
       "│ 560    ┆ 791 ┆ 0.221197 │\n",
       "│ 561    ┆ 429 ┆ 0.119966 │\n",
       "│ 574    ┆ 394 ┆ 0.110179 │\n",
       "│ 580    ┆ 603 ┆ 0.168624 │\n",
       "│ 581    ┆ 51  ┆ 0.014262 │\n",
       "│ 582    ┆ 103 ┆ 0.028803 │\n",
       "│ 583    ┆ 10  ┆ 0.002796 │\n",
       "│ 584    ┆ 553 ┆ 0.154642 │\n",
       "│ 585    ┆ 61  ┆ 0.017058 │\n",
       "│ 587    ┆ 6   ┆ 0.001678 │\n",
       "│ 591    ┆ 19  ┆ 0.005313 │\n",
       "└────────┴─────┴──────────┘"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# failure_codes = [552, 560, 561, 572, 574, 580, 581, 582, 583, 584, 585, 586, 587, 591]\n",
    "\n",
    "# (optional) ensure DLSTCD is numeric; harmless if it already is\n",
    "data = data.with_columns(pl.col(\"DLSTCD\").cast(pl.Int64, strict=False))\n",
    "\n",
    "start = dt.date(1965, 1, 1)\n",
    "end   = dt.date(2003, 12, 31)\n",
    "\n",
    "fail_rows = data.filter(\n",
    "    pl.col(\"DLSTCD\").is_in(failure_codes)\n",
    "    & (pl.col(\"date\") >= pl.lit(start))\n",
    "    & (pl.col(\"date\") <= pl.lit(end))\n",
    ")\n",
    "# frequency table of failure codes\n",
    "fail_counts = (\n",
    "    fail_rows\n",
    "    .group_by(\"DLSTCD\")\n",
    "    .agg(pl.len().alias(\"n\"))\n",
    "    .sort(\"n\", descending=True)\n",
    "    .with_columns( (pl.col(\"n\") / pl.col(\"n\").sum()).alias(\"share\") )\n",
    ")\n",
    "\n",
    "\n",
    "# most common code (as a tiny dict)\n",
    "top = fail_counts.row(0) if fail_counts.height > 0 else None\n",
    "if top:\n",
    "    top_code, top_n, top_share = top\n",
    "    print(f\"Most common: DLSTCD={top_code}  count={top_n:,}  share={top_share:.2%}\")\n",
    "\n",
    "# (optional) sanity check: total failures vs all rows\n",
    "print(\n",
    "    data.select(\n",
    "        pl.len().alias(\"rows_total\"),\n",
    "        pl.col(\"DLSTCD\").is_in(failure_codes).sum().alias(\"rows_failure\")\n",
    "    )\n",
    ")\n",
    "pl.Config(set_tbl_rows=15)\n",
    "fail_counts.sort('DLSTCD')\n",
    "\n",
    "\n",
    "#552 price below acceptable level\n",
    "#560 is insufficent capital\n",
    "#561 insufficent assets float?\n",
    "#574 is bankruptcy\n",
    "#580 delinquent in filing\n",
    "#581 failure to do 12g\n",
    "#582 failure to mee equity requirements\n",
    "#583 denied temp exemption\n",
    "#584 Delisted by current exchange - does not meet exchange's financial guidelines for continued listing\n",
    "#585 Delisted by current exchange - protection of investors and the public interest\n",
    "#587 Delisted by current exchange - corporate governance violation.\n",
    "#591 Delisted by current exchange - delist required by Securities Exchange Commission (SEC)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0703485e",
   "metadata": {},
   "source": [
    "#### Model 1 from CHS"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62291408",
   "metadata": {},
   "source": [
    "NITA, TLTA, EXRET, SIGMA, and RSIZE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "f026b9c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.000917\n",
      "         Iterations 17\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                failure   No. Observations:              1681756\n",
      "Model:                          Logit   Df Residuals:                  1681750\n",
      "Method:                           MLE   Df Model:                            5\n",
      "Date:                Mon, 22 Sep 2025   Pseudo R-squ.:                  0.2028\n",
      "Time:                        11:45:23   Log-Likelihood:                -1542.5\n",
      "converged:                       True   LL-Null:                       -1934.9\n",
      "Covariance Type:            nonrobust   LLR p-value:                2.124e-167\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        -28.4774      1.616    -17.623      0.000     -31.644     -25.310\n",
      "nita_w        -0.6666      0.434     -1.535      0.125      -1.517       0.184\n",
      "tlta_w        -0.0066      0.007     -0.986      0.324      -0.020       0.007\n",
      "rsize_w       -1.4395      0.127    -11.364      0.000      -1.688      -1.191\n",
      "exret_w       -4.3327      0.568     -7.626      0.000      -5.446      -3.219\n",
      "sigma_w        1.6031      0.256      6.251      0.000       1.101       2.106\n",
      "==============================================================================\n",
      "\n",
      "Possibly complete quasi-separation: A fraction 0.85 of observations can be\n",
      "perfectly predicted. This might indicate that there is complete\n",
      "quasi-separation. In this case some parameters will not be identified.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "# --- define in-sample period ---\n",
    "start = pl.date(1965, 1, 1)   # Jan 1965\n",
    "end   = pl.date(2003, 12, 31) # Dec 2003\n",
    "\n",
    "# filter in Polars\n",
    "in_sample = data.filter(\n",
    "    (pl.col(\"date\") >= start) & (pl.col(\"date\") <= end)\n",
    ")\n",
    "\n",
    "# choose predictors\n",
    "predictors = [\n",
    "    \"nita_w\",\n",
    "    \"tlta_w\",\n",
    "    \"rsize_w\",\n",
    "    \"exret_w\",\n",
    "    \"sigma_w\",\n",
    "]\n",
    "\n",
    "# drop rows with missing data in predictors or failure\n",
    "reg_data = in_sample.select([\"failure\"] + predictors).drop_nulls().to_pandas()\n",
    "\n",
    "X = reg_data[predictors]\n",
    "y = reg_data[\"failure\"]\n",
    "\n",
    "# add constant (intercept)\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# fit logit model\n",
    "logit_model = sm.Logit(y, X)\n",
    "result = logit_model.fit()\n",
    "\n",
    "print(result.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "94db85b2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>nita_w</th><th>tlta_w</th><th>rsize_w</th><th>exret_w</th><th>sigma_w</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>1.795838e6</td><td>1.751427e6</td><td>1.737779e6</td><td>1.735555e6</td><td>1.793348e6</td></tr><tr><td>&quot;null_count&quot;</td><td>0.0</td><td>44411.0</td><td>58059.0</td><td>60283.0</td><td>2490.0</td></tr><tr><td>&quot;mean&quot;</td><td>-0.010268</td><td>11.842327</td><td>-10.392358</td><td>-0.008581</td><td>0.529575</td></tr><tr><td>&quot;std&quot;</td><td>0.170435</td><td>12.746931</td><td>1.920209</td><td>0.117867</td><td>0.307871</td></tr><tr><td>&quot;min&quot;</td><td>-0.439826</td><td>0.338441</td><td>-13.650849</td><td>-0.253595</td><td>0.160525</td></tr><tr><td>&quot;25%&quot;</td><td>-0.076283</td><td>2.395975</td><td>-11.856678</td><td>-0.076478</td><td>0.296229</td></tr><tr><td>&quot;50%&quot;</td><td>-0.003712</td><td>6.966596</td><td>-10.528356</td><td>-0.006576</td><td>0.447097</td></tr><tr><td>&quot;75%&quot;</td><td>0.090715</td><td>17.30868</td><td>-9.026102</td><td>0.062013</td><td>0.676295</td></tr><tr><td>&quot;max&quot;</td><td>0.26856</td><td>46.111763</td><td>-6.72478</td><td>0.22162</td><td>1.287601</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 6)\n",
       "┌────────────┬────────────┬────────────┬────────────┬────────────┬────────────┐\n",
       "│ statistic  ┆ nita_w     ┆ tlta_w     ┆ rsize_w    ┆ exret_w    ┆ sigma_w    │\n",
       "│ ---        ┆ ---        ┆ ---        ┆ ---        ┆ ---        ┆ ---        │\n",
       "│ str        ┆ f64        ┆ f64        ┆ f64        ┆ f64        ┆ f64        │\n",
       "╞════════════╪════════════╪════════════╪════════════╪════════════╪════════════╡\n",
       "│ count      ┆ 1.795838e6 ┆ 1.751427e6 ┆ 1.737779e6 ┆ 1.735555e6 ┆ 1.793348e6 │\n",
       "│ null_count ┆ 0.0        ┆ 44411.0    ┆ 58059.0    ┆ 60283.0    ┆ 2490.0     │\n",
       "│ mean       ┆ -0.010268  ┆ 11.842327  ┆ -10.392358 ┆ -0.008581  ┆ 0.529575   │\n",
       "│ std        ┆ 0.170435   ┆ 12.746931  ┆ 1.920209   ┆ 0.117867   ┆ 0.307871   │\n",
       "│ min        ┆ -0.439826  ┆ 0.338441   ┆ -13.650849 ┆ -0.253595  ┆ 0.160525   │\n",
       "│ 25%        ┆ -0.076283  ┆ 2.395975   ┆ -11.856678 ┆ -0.076478  ┆ 0.296229   │\n",
       "│ 50%        ┆ -0.003712  ┆ 6.966596   ┆ -10.528356 ┆ -0.006576  ┆ 0.447097   │\n",
       "│ 75%        ┆ 0.090715   ┆ 17.30868   ┆ -9.026102  ┆ 0.062013   ┆ 0.676295   │\n",
       "│ max        ┆ 0.26856    ┆ 46.111763  ┆ -6.72478   ┆ 0.22162    ┆ 1.287601   │\n",
       "└────────────┴────────────┴────────────┴────────────┴────────────┴────────────┘"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "in_sample.select(['nita_w','tlta_w','rsize_w','exret_w','sigma_w']).describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab698c77",
   "metadata": {},
   "source": [
    "#### Model 1 from CHS (fails in next 12 month)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98651f89",
   "metadata": {},
   "source": [
    "NITA, TLTA, EXRET, SIGMA, and RSIZE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "69e2dab7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.085465\n",
      "         Iterations 10\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:             failure_12   No. Observations:              1681756\n",
      "Model:                          Logit   Df Residuals:                  1681750\n",
      "Method:                           MLE   Df Model:                            5\n",
      "Date:                Mon, 22 Sep 2025   Pseudo R-squ.:                  0.2434\n",
      "Time:                        11:45:33   Log-Likelihood:            -1.4373e+05\n",
      "converged:                       True   LL-Null:                   -1.8997e+05\n",
      "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        -13.3620      0.062   -215.015      0.000     -13.484     -13.240\n",
      "nita_w        -1.4526      0.032    -46.039      0.000      -1.514      -1.391\n",
      "tlta_w        -0.0086      0.000    -17.830      0.000      -0.010      -0.008\n",
      "rsize_w       -0.7057      0.005   -133.305      0.000      -0.716      -0.695\n",
      "exret_w       -1.4925      0.036    -41.960      0.000      -1.562      -1.423\n",
      "sigma_w        1.7886      0.017    104.776      0.000       1.755       1.822\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "in_sample=in_sample.sort('PERMNO','date')\n",
    "\n",
    "# y_t = 1 if failure occurs any time in the next 12 months (exclude month t)\n",
    "in_sample = in_sample.with_columns(\n",
    "    pl.concat_list([pl.col(\"failure\").shift(-i) for i in range(1, 13)])\n",
    "      .list.max()\n",
    "      .alias(\"failure_12\")\n",
    ")\n",
    "\n",
    "# choose predictors\n",
    "predictors = [\n",
    "    \"nita_w\",\n",
    "    \"tlta_w\",\n",
    "    \"rsize_w\",\n",
    "    \"exret_w\",\n",
    "    \"sigma_w\",\n",
    "]\n",
    "\n",
    "# drop rows with missing data in predictors or failure\n",
    "reg_data = in_sample.select([\"failure_12\"] + predictors).drop_nulls().to_pandas()\n",
    "\n",
    "X = reg_data[predictors]\n",
    "y = reg_data[\"failure_12\"]\n",
    "\n",
    "# add constant (intercept)\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# fit logit model\n",
    "logit_model_12 = sm.Logit(y, X)\n",
    "result_12 = logit_model_12.fit()\n",
    "\n",
    "print(result_12.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "184d2282",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>nita_w</th><th>tlta_w</th><th>rsize_w</th><th>exret_w</th><th>sigma_w</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>1.795838e6</td><td>1.751427e6</td><td>1.737779e6</td><td>1.735555e6</td><td>1.793348e6</td></tr><tr><td>&quot;null_count&quot;</td><td>0.0</td><td>44411.0</td><td>58059.0</td><td>60283.0</td><td>2490.0</td></tr><tr><td>&quot;mean&quot;</td><td>-0.010268</td><td>11.842327</td><td>-10.392358</td><td>-0.008581</td><td>0.529575</td></tr><tr><td>&quot;std&quot;</td><td>0.170435</td><td>12.746931</td><td>1.920209</td><td>0.117867</td><td>0.307871</td></tr><tr><td>&quot;min&quot;</td><td>-0.439826</td><td>0.338441</td><td>-13.650849</td><td>-0.253595</td><td>0.160525</td></tr><tr><td>&quot;25%&quot;</td><td>-0.076283</td><td>2.395975</td><td>-11.856678</td><td>-0.076478</td><td>0.296229</td></tr><tr><td>&quot;50%&quot;</td><td>-0.003712</td><td>6.966596</td><td>-10.528356</td><td>-0.006576</td><td>0.447097</td></tr><tr><td>&quot;75%&quot;</td><td>0.090715</td><td>17.30868</td><td>-9.026102</td><td>0.062013</td><td>0.676295</td></tr><tr><td>&quot;max&quot;</td><td>0.26856</td><td>46.111763</td><td>-6.72478</td><td>0.22162</td><td>1.287601</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 6)\n",
       "┌────────────┬────────────┬────────────┬────────────┬────────────┬────────────┐\n",
       "│ statistic  ┆ nita_w     ┆ tlta_w     ┆ rsize_w    ┆ exret_w    ┆ sigma_w    │\n",
       "│ ---        ┆ ---        ┆ ---        ┆ ---        ┆ ---        ┆ ---        │\n",
       "│ str        ┆ f64        ┆ f64        ┆ f64        ┆ f64        ┆ f64        │\n",
       "╞════════════╪════════════╪════════════╪════════════╪════════════╪════════════╡\n",
       "│ count      ┆ 1.795838e6 ┆ 1.751427e6 ┆ 1.737779e6 ┆ 1.735555e6 ┆ 1.793348e6 │\n",
       "│ null_count ┆ 0.0        ┆ 44411.0    ┆ 58059.0    ┆ 60283.0    ┆ 2490.0     │\n",
       "│ mean       ┆ -0.010268  ┆ 11.842327  ┆ -10.392358 ┆ -0.008581  ┆ 0.529575   │\n",
       "│ std        ┆ 0.170435   ┆ 12.746931  ┆ 1.920209   ┆ 0.117867   ┆ 0.307871   │\n",
       "│ min        ┆ -0.439826  ┆ 0.338441   ┆ -13.650849 ┆ -0.253595  ┆ 0.160525   │\n",
       "│ 25%        ┆ -0.076283  ┆ 2.395975   ┆ -11.856678 ┆ -0.076478  ┆ 0.296229   │\n",
       "│ 50%        ┆ -0.003712  ┆ 6.966596   ┆ -10.528356 ┆ -0.006576  ┆ 0.447097   │\n",
       "│ 75%        ┆ 0.090715   ┆ 17.30868   ┆ -9.026102  ┆ 0.062013   ┆ 0.676295   │\n",
       "│ max        ┆ 0.26856    ┆ 46.111763  ┆ -6.72478   ┆ 0.22162    ┆ 1.287601   │\n",
       "└────────────┴────────────┴────────────┴────────────┴────────────┴────────────┘"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "in_sample.select(['nita_w','tlta_w','rsize_w','exret_w','sigma_w']).describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d6a4d25",
   "metadata": {},
   "source": [
    "### Portfolio Formation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "d04675ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1) grab coefficients from statsmodels\n",
    "betas = result.params.to_dict()\n",
    "b0 = betas.pop(\"const\", 0.0)\n",
    "\n",
    "# 2) build the linear predictor in Polars\n",
    "linpred = pl.lit(b0)\n",
    "for name, coef in betas.items():\n",
    "    # skip any coef whose column isn't present (defensive)\n",
    "    if name in in_sample.columns:\n",
    "        linpred = linpred + pl.col(name) * float(coef)\n",
    "\n",
    "# 3) logistic transform to get probability for every row\n",
    "in_sample = in_sample.with_columns(\n",
    "    ((pl.lit(1.0) / (pl.lit(1.0) + (-linpred).exp())).shift(1)).alias(\"p_failure\")\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "884c7122",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1) grab coefficients from statsmodels\n",
    "betas_12 = result_12.params.to_dict()\n",
    "b0_12 = betas_12.pop(\"const\", 0.0)\n",
    "\n",
    "# 2) build the linear predictor in Polars\n",
    "linpred = pl.lit(b0_12)\n",
    "for name, coef in betas_12.items():\n",
    "    # skip any coef whose column isn't present (defensive)\n",
    "    if name in in_sample.columns:\n",
    "        linpred = linpred + pl.col(name) * float(coef)\n",
    "\n",
    "# 3) logistic transform to get probability for every row\n",
    "in_sample = in_sample.with_columns(\n",
    "    ((pl.lit(1.0) / (pl.lit(1.0) + (-linpred).exp())).shift(1)).alias(\"p_failure_12\")\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55fe2daa",
   "metadata": {},
   "source": [
    "Monthly Rebalance (Equal Weight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "e19502cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "bin_names=[str(i) for i in range(10)]\n",
    "\n",
    "in_sample=in_sample.filter(pl.col('p_failure').is_not_null())\n",
    "\n",
    "\n",
    "in_sample=in_sample.with_columns(\n",
    "    (pl.col('p_failure').qcut(10,labels=bin_names)).alias('bin')\n",
    "    \n",
    ")\n",
    "\n",
    "rets=in_sample.group_by(['bin','date']).agg(pl.col('RET').mean()).sort('bin','date')\n",
    "\n",
    "rets=rets.pivot(index='date',on='bin',values='RET')\n",
    "rets=rets.sort('date')\n",
    "\n",
    "for bin in bin_names:\n",
    "    rets=rets.with_columns(\n",
    "        (pl.col(f'{bin}').cum_sum()).alias(f'{bin}_cum')\n",
    "    )\n",
    "\n",
    "rets=rets.with_columns(\n",
    "    (pl.col('0_cum')-pl.col('9_cum')).alias('spread_cum')\n",
    ")\n",
    "\n",
    "rets=rets.with_columns(\n",
    "    (pl.col('0')-pl.col('9')).alias('spread')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "3ba2be40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_names.append('spread')\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "for bin in bin_names:\n",
    "    sub=rets.select([f'{bin}_cum','date']).to_pandas()\n",
    "    x=sub['date']\n",
    "    y=sub[f'{bin}_cum']\n",
    "    if bin == \"spread\":\n",
    "        plt.plot(x, y, label=f\"{bin}\", linewidth=2, color=\"black\")\n",
    "    else:\n",
    "        plt.plot(x, y, label=f\"{bin}\", linewidth=1)\n",
    "\n",
    "\n",
    "plt.title('Decile Rets')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Ret')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "aa64a7e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sharpe ratios:\n",
      "0         0.854251\n",
      "1         0.771140\n",
      "2         0.666992\n",
      "3         0.634473\n",
      "4         0.614450\n",
      "5         0.626231\n",
      "6         0.462155\n",
      "7         0.587132\n",
      "8         0.481581\n",
      "9         0.799624\n",
      "spread   -0.566034\n",
      "dtype: float32\n",
      "Average # of stocks per bin:\n",
      "shape: (10, 2)\n",
      "┌─────┬────────────┐\n",
      "│ bin ┆ avg_n      │\n",
      "│ --- ┆ ---        │\n",
      "│ cat ┆ f64        │\n",
      "╞═════╪════════════╡\n",
      "│ 0   ┆ 532.202532 │\n",
      "│ 1   ┆ 525.55     │\n",
      "│ 2   ┆ 522.282609 │\n",
      "│ 3   ┆ 525.55     │\n",
      "│ 4   ┆ 525.546875 │\n",
      "│ 5   ┆ 533.892063 │\n",
      "│ 6   ┆ 537.300319 │\n",
      "│ 7   ┆ 533.892063 │\n",
      "│ 8   ┆ 528.852201 │\n",
      "│ 9   ┆ 525.55     │\n",
      "└─────┴────────────┘\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1899963/3028654472.py:22: DeprecationWarning: `pl.count()` is deprecated. Please use `pl.len()` instead.\n",
      "(Deprecated in version 0.20.5)\n",
      "  .agg(pl.count().alias(\"n\"))\n"
     ]
    }
   ],
   "source": [
    "# --- Sharpe ratios per bin ---\n",
    "rets_pd = rets.to_pandas().set_index(\"date\")\n",
    "\n",
    "bin_cols = [str(i) for i in range(10)]\n",
    "bin_cols.append('spread')\n",
    "rets_bins = rets_pd[bin_cols]\n",
    "\n",
    "rf = 0.0  # set monthly risk-free if available\n",
    "excess = rets_bins - rf\n",
    "\n",
    "mean_ret = excess.mean()\n",
    "vol = excess.std()\n",
    "sharpe = (mean_ret / vol) * np.sqrt(12)   # annualized Sharpe (monthly → yearly)\n",
    "\n",
    "print(\"Sharpe ratios:\")\n",
    "print(sharpe)\n",
    "\n",
    "# --- Average number of stocks per bin ---\n",
    "n_stocks = (\n",
    "    in_sample\n",
    "    .group_by([\"date\",\"bin\"])\n",
    "    .agg(pl.count().alias(\"n\"))\n",
    "    .group_by(\"bin\")\n",
    "    .agg(pl.col(\"n\").mean().alias(\"avg_n\"))\n",
    "    .sort(\"bin\")\n",
    ")\n",
    "\n",
    "print(\"Average # of stocks per bin:\")\n",
    "print(n_stocks)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acf33080",
   "metadata": {},
   "source": [
    "Monthly holding on failure in next 12 months"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "7e23e612",
   "metadata": {},
   "outputs": [],
   "source": [
    "bin_names=[str(i) for i in range(10)]\n",
    "\n",
    "in_sample=in_sample.filter(pl.col('p_failure_12').is_not_null())\n",
    "\n",
    "\n",
    "in_sample=in_sample.with_columns(\n",
    "    (pl.col('p_failure_12').qcut(10,labels=bin_names)).alias('bin')\n",
    ")\n",
    "\n",
    "rets=in_sample.group_by(['bin','date']).agg(pl.col('RET').mean()).sort('bin','date')\n",
    "\n",
    "rets=rets.pivot(index='date',on='bin',values='RET')\n",
    "rets=rets.sort('date')\n",
    "\n",
    "for bin in bin_names:\n",
    "    rets=rets.with_columns(\n",
    "        (pl.col(f'{bin}').cum_sum()).alias(f'{bin}_cum')\n",
    "    )\n",
    "\n",
    "rets=rets.with_columns(\n",
    "    (pl.col('0_cum')-pl.col('9_cum')).alias('spread_cum')\n",
    ")\n",
    "\n",
    "rets=rets.with_columns(\n",
    "    (pl.col('0')-pl.col('9')).alias('spread')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "e694eee5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sharpe ratios:\n",
      "0         0.841335\n",
      "1         0.799422\n",
      "2         0.705238\n",
      "3         0.683305\n",
      "4         0.623879\n",
      "5         0.501925\n",
      "6         0.605352\n",
      "7         0.530268\n",
      "8         0.472760\n",
      "9         0.685432\n",
      "spread   -0.466455\n",
      "dtype: float32\n",
      "Average # of stocks per bin:\n",
      "shape: (10, 2)\n",
      "┌─────┬────────────┐\n",
      "│ bin ┆ avg_n      │\n",
      "│ --- ┆ ---        │\n",
      "│ cat ┆ f64        │\n",
      "╞═════╪════════════╡\n",
      "│ 0   ┆ 532.202532 │\n",
      "│ 1   ┆ 525.55     │\n",
      "│ 2   ┆ 525.546875 │\n",
      "│ 3   ┆ 525.55     │\n",
      "│ 4   ┆ 527.194357 │\n",
      "│ 5   ┆ 532.205696 │\n",
      "│ 6   ┆ 532.196203 │\n",
      "│ 7   ┆ 540.758842 │\n",
      "│ 8   ┆ 527.194357 │\n",
      "│ 9   ┆ 532.202532 │\n",
      "└─────┴────────────┘\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1899963/4277967632.py:41: DeprecationWarning: `pl.count()` is deprecated. Please use `pl.len()` instead.\n",
      "(Deprecated in version 0.20.5)\n",
      "  .agg(pl.count().alias(\"n\"))\n"
     ]
    }
   ],
   "source": [
    "bin_names.append('spread')\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "for bin in bin_names:\n",
    "    sub=rets.select([f'{bin}_cum','date']).to_pandas()\n",
    "    x=sub['date']\n",
    "    y=sub[f'{bin}_cum']\n",
    "    if bin == \"spread\":\n",
    "        plt.plot(x, y, label=f\"{bin}\", linewidth=2, color=\"black\")\n",
    "    else:\n",
    "        plt.plot(x, y, label=f\"{bin}\", linewidth=1)\n",
    "\n",
    "\n",
    "plt.title('Decile Rets')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Ret')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# --- Sharpe ratios per bin ---\n",
    "rets_pd = rets.to_pandas().set_index(\"date\")\n",
    "\n",
    "bin_cols = [str(i) for i in range(10)]\n",
    "bin_cols.append('spread')\n",
    "rets_bins = rets_pd[bin_cols]\n",
    "\n",
    "rf = 0.0  # set monthly risk-free if available\n",
    "excess = rets_bins - rf\n",
    "\n",
    "mean_ret = excess.mean()\n",
    "vol = excess.std()\n",
    "sharpe = (mean_ret / vol) * np.sqrt(12)   # annualized Sharpe (monthly → yearly)\n",
    "\n",
    "print(\"Sharpe ratios:\")\n",
    "print(sharpe)\n",
    "\n",
    "# --- Average number of stocks per bin ---\n",
    "n_stocks = (\n",
    "    in_sample\n",
    "    .group_by([\"date\",\"bin\"])\n",
    "    .agg(pl.count().alias(\"n\"))\n",
    "    .group_by(\"bin\")\n",
    "    .agg(pl.col(\"n\").mean().alias(\"avg_n\"))\n",
    "    .sort(\"bin\")\n",
    ")\n",
    "\n",
    "print(\"Average # of stocks per bin:\")\n",
    "print(n_stocks)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8a193c9",
   "metadata": {},
   "source": [
    "Different Size Bins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "8c6d0e5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import polars as pl\n",
    "import math\n",
    "\n",
    "# keep only valid p_failure rows\n",
    "in_sample = in_sample.filter(pl.col(\"p_failure\").is_not_null())\n",
    "\n",
    "# custom percentile cutpoints\n",
    "probs = [0.05, 0.10, 0.20, 0.40, 0.60, 0.80, 0.90, 0.95, 0.99]\n",
    "qvals = (\n",
    "    in_sample\n",
    "    .select([pl.col(\"p_failure\").quantile(p).alias(f\"q{int(p*100)}\") for p in probs])\n",
    ").row(0)\n",
    "\n",
    "# strictly increasing edges\n",
    "edges = [-math.inf]\n",
    "eps = 1e-12\n",
    "for v in qvals:\n",
    "    v = float(v)\n",
    "    if v <= edges[-1]:\n",
    "        v = edges[-1] + eps\n",
    "    edges.append(v)\n",
    "edges.append(math.inf)\n",
    "\n",
    "bin_names = [\n",
    "    \"0-5\",\"5-10\",\"10-20\",\"20-40\",\"40-60\",\n",
    "    \"60-80\",\"80-90\",\"90-95\",\"95-99\",\"99-100\"\n",
    "]\n",
    "\n",
    "# assign bins via chained conditions (USE pl.lit for string outputs)\n",
    "p = pl.col(\"p_failure\")\n",
    "expr = None\n",
    "for i, label in enumerate(bin_names[:-1], start=1):  # up to the 9th edge\n",
    "    cond = p <= edges[i]\n",
    "    then_val = pl.lit(label)  # <- key fix\n",
    "    expr = (pl.when(cond).then(then_val)) if expr is None else expr.when(cond).then(then_val)\n",
    "expr = expr.otherwise(pl.lit(bin_names[-1]))\n",
    "\n",
    "in_sample = in_sample.with_columns(expr.alias(\"bin\"))\n",
    "\n",
    "\n",
    "# --- 3) aggregate returns and cumulative series (your pipeline) ---\n",
    "rets = (\n",
    "    in_sample\n",
    "    .group_by([\"bin\", \"date\"])\n",
    "    .agg(pl.col(\"RET\").mean())\n",
    "    .sort([\"bin\", \"date\"])\n",
    "    .pivot(index=\"date\", on=\"bin\", values=\"RET\")\n",
    "    .sort(\"date\")\n",
    ")\n",
    "\n",
    "for b in bin_names:\n",
    "    rets = rets.with_columns(pl.col(b).cum_sum().alias(f\"{b}_cum\"))\n",
    "\n",
    "\n",
    "rets = rets.with_columns(\n",
    "    (pl.col(\"0-5_cum\") - pl.col(\"99-100_cum\")).alias(\"spread_cum\"),\n",
    "    (pl.col(\"0-5\") - pl.col(\"99-100\")).alias(\"spread\"),\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "21869e6b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bin_names.append('spread')\n",
    "\n",
    "plt.figure(figsize=(12,6))\n",
    "for bin in bin_names:\n",
    "    sub=rets.select([f'{bin}_cum','date']).to_pandas()\n",
    "    x=sub['date']\n",
    "    y=sub[f'{bin}_cum']\n",
    "    if bin == \"spread\":\n",
    "        plt.plot(x, y, label=f\"{bin}\", linewidth=2, color=\"black\")\n",
    "    else:\n",
    "        plt.plot(x, y, label=f\"{bin}\", linewidth=1)\n",
    "\n",
    "\n",
    "plt.title('Decile Rets')\n",
    "plt.xlabel('Date')\n",
    "plt.ylabel('Ret')\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "292e3608",
   "metadata": {},
   "source": [
    "## In progress code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22c1d83c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (1, 4)\n",
      "┌─────────┬──────────┬────────────┬─────────────┐\n",
      "│ rows    ┆ null_mbq ┆ null_tlmta ┆ null_cshmta │\n",
      "│ ---     ┆ ---      ┆ ---        ┆ ---         │\n",
      "│ u32     ┆ u32      ┆ u32        ┆ u32         │\n",
      "╞═════════╪══════════╪════════════╪═════════════╡\n",
      "│ 2561893 ┆ 0        ┆ 0          ┆ 0           │\n",
      "└─────────┴──────────┴────────────┴─────────────┘\n"
     ]
    }
   ],
   "source": [
    "# #chats null filling code\n",
    "\n",
    "# base_sparse = [\"mbq\", \"tlmta\", \"cshmta\"]\n",
    "\n",
    "# targets = []\n",
    "# for c in base_sparse:\n",
    "#     if c in data.columns:\n",
    "#         targets.append(c)\n",
    "#     elif f\"{c}_w\" in data.columns:\n",
    "#         targets.append(f\"{c}_w\")\n",
    "\n",
    "# if targets:\n",
    "#     # 1) cross-sectional means by month for each target\n",
    "#     cs_means = (\n",
    "#         data.group_by(\"date\")\n",
    "#             .agg([pl.col(c).mean().alias(f\"{c}__cs\") for c in targets])\n",
    "#     )\n",
    "#     data = data.join(cs_means, on=\"date\", how=\"left\")\n",
    "\n",
    "#     # 2) fill missing with same-month CS mean\n",
    "#     data = data.with_columns([\n",
    "#         pl.coalesce([pl.col(c), pl.col(f\"{c}__cs\")]).alias(c)\n",
    "#         for c in targets\n",
    "#     ]).drop([f\"{c}__cs\" for c in targets])\n",
    "\n",
    "#     # 3) pooled fallback in case an entire month had no data\n",
    "#     pooled = data.select(\n",
    "#         [pl.col(c).mean().alias(f\"{c}__pool\") for c in targets]\n",
    "#     ).to_dicts()[0]\n",
    "\n",
    "#     for c in targets:\n",
    "#         pool = pooled[f\"{c}__pool\"]\n",
    "#         data = data.with_columns(\n",
    "#             pl.coalesce([pl.col(c), pl.lit(float(pool) if pool is not None else 0.0)])\n",
    "#               .alias(c)\n",
    "#         )\n",
    "\n",
    "#     # sanity check\n",
    "#     print(\n",
    "#         data.select(\n",
    "#             pl.len().alias(\"rows\"),\n",
    "#             *[pl.col(c).is_null().sum().alias(f\"null_{c}\") for c in targets]\n",
    "#         )\n",
    "#     )\n",
    "# else:\n",
    "#     print(\"No target columns (mbq/tlmta/cshmta or their *_w versions) found in `data`.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7babea3a",
   "metadata": {},
   "source": [
    "$$\n",
    "NIMTAAVG_{t-1,t-12} = \\frac{1 - \\phi^3}{1 - \\phi^{12}} \n",
    "\\left( NIMTA_{t-1,t-3} + \\cdots + \\phi^9 NIMTA_{t-10,t-12} \\right),\n",
    "$$\n",
    "\n",
    "$$\n",
    "EXRETAVG_{t-1,t-12} = \\frac{1 - \\phi}{1 - \\phi^{12}}\n",
    "\\left( EXRET_{t-1} + \\cdots + \\phi^{11} EXRET_{t-12} \\right),\n",
    "$$\n",
    "\n",
    "where $\\phi = 2^{-\\tfrac{1}{3}}$\n",
    "\n",
    "When lagged excess returns or profitability are missing, we replace them with their crosssectional means in order to avoid losing observations. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "ab0cbf93",
   "metadata": {},
   "outputs": [],
   "source": [
    "# #this was chat's code but I am pretty sure this is right\n",
    "\n",
    "# phi = 2 ** (-1/3)  # weights halve each quarter\n",
    "\n",
    "# # 0) sort\n",
    "# data = data.sort([\"PERMNO\", \"date\"])\n",
    "\n",
    "# # 1) build within-firm lags 1..12 for nimta & exret\n",
    "# lag_exprs = []\n",
    "# for col in [\"nimta\", \"exret\"]:\n",
    "#     lag_exprs += [\n",
    "#         pl.col(col).shift(k).over(\"PERMNO\").alias(f\"{col}_lag{k}\")\n",
    "#         for k in range(1, 13)\n",
    "#     ]\n",
    "# data = data.with_columns(lag_exprs)\n",
    "\n",
    "# # 2) cross-sectional (by-date) means for nimta & exret\n",
    "# means = (\n",
    "#     data.group_by(\"date\")\n",
    "#         .agg(\n",
    "#             nimta_mean = pl.col(\"nimta\").mean(),\n",
    "#             exret_mean = pl.col(\"exret\").mean()\n",
    "#         )\n",
    "# )\n",
    "\n",
    "# # 3) for each k, attach the *date-(k months)* cross-sectional mean,\n",
    "# #    and use it to fill missing lags\n",
    "# for k in range(1, 13):\n",
    "#     # key to look up mean at t-k\n",
    "#     mean_k = means.rename({\"date\": f\"date_k{k}\"})\n",
    "\n",
    "#     # add a date-(k months) column to main frame\n",
    "#     data = data.with_columns(\n",
    "#         pl.col(\"date\").dt.offset_by(f\"-{k}mo\").alias(f\"date_k{k}\")\n",
    "#     )\n",
    "\n",
    "#     # join in the CS mean for that lag month\n",
    "#     data = data.join(\n",
    "#         mean_k,\n",
    "#         left_on=f\"date_k{k}\",\n",
    "#         right_on=f\"date_k{k}\",\n",
    "#         how=\"left\",\n",
    "#     )\n",
    "\n",
    "#     # fill missing lags with that cross-sectional mean for the lag month\n",
    "#     data = data.with_columns([\n",
    "#         pl.when(pl.col(f\"nimta_lag{k}\").is_null())\n",
    "#           .then(pl.col(\"nimta_mean\"))\n",
    "#           .otherwise(pl.col(f\"nimta_lag{k}\"))\n",
    "#           .alias(f\"nimta_lag{k}_f\"),\n",
    "\n",
    "#         pl.when(pl.col(f\"exret_lag{k}\").is_null())\n",
    "#           .then(pl.col(\"exret_mean\"))\n",
    "#           .otherwise(pl.col(f\"exret_lag{k}\"))\n",
    "#           .alias(f\"exret_lag{k}_f\"),\n",
    "#     ])\n",
    "\n",
    "#     # (optional) drop helper columns to keep frame tidy\n",
    "#     data = data.drop([f\"date_k{k}\", \"nimta_mean\", \"exret_mean\"])\n",
    "\n",
    "# # 4) NIMTAAVG_{t-1,t-12}  (3-month block averages with φ^0, φ^3, φ^6, φ^9)\n",
    "# avg1 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(1, 4)])    # t-1..t-3\n",
    "# avg2 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(4, 7)])    # t-4..t-6\n",
    "# avg3 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(7, 10)])   # t-7..t-9\n",
    "# avg4 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(10, 13)])  # t-10..t-12\n",
    "\n",
    "# nimtaavg = ((1 - phi**3) / (1 - phi**12)) * (\n",
    "#     avg1 + (phi**3) * avg2 + (phi**6) * avg3 + (phi**9) * avg4\n",
    "# )\n",
    "\n",
    "# data = data.with_columns(nimtaavg.alias(\"nimtaavg\"))\n",
    "\n",
    "# # 5) EXRETAVG_{t-1,t-12}  (monthly EW average with φ^{0..11})\n",
    "# weights = [phi**(k-1) for k in range(1, 13)]\n",
    "# weighted_sum = pl.sum_horizontal(\n",
    "#     [pl.col(f\"exret_lag{k}_f\") * weights[k-1] for k in range(1, 13)]\n",
    "# )\n",
    "# exretavg = ((1 - phi) / (1 - phi**12)) * weighted_sum\n",
    "\n",
    "# data = data.with_columns(exretavg.alias(\"exretavg\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "cb25ce72",
   "metadata": {},
   "outputs": [],
   "source": [
    "# phi = 2 ** (-1/3)  # weights halve each quarter\n",
    "\n",
    "# # --- 0) canonical monthly index so joins are exact ----------------------------\n",
    "# # assumes `date` is a proper datetime (month-end or month-start is fine)\n",
    "# data = data.with_columns([\n",
    "#     (pl.col(\"date\").dt.year() * 12 + pl.col(\"date\").dt.month()).alias(\"mon_idx\")\n",
    "# ])\n",
    "\n",
    "# # --- 1) within-firm lags (raw nimta & exret) ---------------------------------\n",
    "# lag_exprs = []\n",
    "# for col in [\"nimta\", \"exret\"]:\n",
    "#     lag_exprs += [\n",
    "#         pl.col(col).shift(k).over(\"PERMNO\").alias(f\"{col}_lag{k}\")\n",
    "#         for k in range(1, 13)\n",
    "#     ]\n",
    "# data = data.with_columns(lag_exprs)\n",
    "\n",
    "# # --- 2) cross-sectional means by month (at time t) ---------------------------\n",
    "# means = (\n",
    "#     data.group_by(\"mon_idx\")\n",
    "#         .agg(\n",
    "#             nimta_mean_t = pl.col(\"nimta\").mean(),\n",
    "#             exret_mean_t = pl.col(\"exret\").mean()\n",
    "#         )\n",
    "# )\n",
    "\n",
    "# # --- 3) for each k, fetch the cross-sectional mean at (t-k) using mon_idx ----\n",
    "# for k in range(1, 13):\n",
    "#     # the month index we want for this lag\n",
    "#     data = data.with_columns(\n",
    "#         (pl.col(\"mon_idx\") - k).alias(f\"mon_idx_k{k}\")\n",
    "#     )\n",
    "\n",
    "#     # attach means for (t-k) by joining on mon_idx_k{k}\n",
    "#     data = data.join(\n",
    "#         means.rename({\"mon_idx\": f\"mon_idx_k{k}\",\n",
    "#                       \"nimta_mean_t\": f\"nimta_mean_k{k}\",\n",
    "#                       \"exret_mean_t\": f\"exret_mean_k{k}\"}),\n",
    "#         on=f\"mon_idx_k{k}\",\n",
    "#         how=\"left\",\n",
    "#     )\n",
    "\n",
    "#     # fill missing lags with *that month’s* cross-sectional mean (t-k)\n",
    "#     data = data.with_columns([\n",
    "#         pl.when(pl.col(f\"nimta_lag{k}\").is_null())\n",
    "#           .then(pl.col(f\"nimta_mean_k{k}\"))\n",
    "#           .otherwise(pl.col(f\"nimta_lag{k}\"))\n",
    "#           .alias(f\"nimta_lag{k}_f\"),\n",
    "\n",
    "#         pl.when(pl.col(f\"exret_lag{k}\").is_null())\n",
    "#           .then(pl.col(f\"exret_mean_k{k}\"))\n",
    "#           .otherwise(pl.col(f\"exret_lag{k}\"))\n",
    "#           .alias(f\"exret_lag{k}_f\"),\n",
    "#     ])\n",
    "\n",
    "#     # (optional) drop helpers to keep tidy; keep _f columns\n",
    "#     data = data.drop([f\"mon_idx_k{k}\", f\"nimta_mean_k{k}\", f\"exret_mean_k{k}\"])\n",
    "\n",
    "# # --- 4) NIMTAAVG_{t-1..t-12} (3-mo blocks with φ^{0,3,6,9}) ------------------\n",
    "# avg1 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(1, 4)])    # t-1..t-3\n",
    "# avg2 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(4, 7)])    # t-4..t-6\n",
    "# avg3 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(7, 10)])   # t-7..t-9\n",
    "# avg4 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(10, 13)])  # t-10..t-12\n",
    "\n",
    "# nimtaavg = ((1 - phi**3) / (1 - phi**12)) * (\n",
    "#     avg1 + (phi**3) * avg2 + (phi**6) * avg3 + (phi**9) * avg4\n",
    "# )\n",
    "# data = data.with_columns(nimtaavg.alias(\"nimtaavg\"))\n",
    "\n",
    "# # --- 5) EXRETAVG_{t-1..t-12} (EW with φ^{0..11}) -----------------------------\n",
    "# weights = [phi**(k-1) for k in range(1, 13)]\n",
    "# weighted_sum = pl.sum_horizontal(\n",
    "#     [pl.col(f\"exret_lag{k}_f\") * weights[k-1] for k in range(1, 13)]\n",
    "# )\n",
    "# exretavg = ((1 - phi) / (1 - phi**12)) * weighted_sum\n",
    "# data = data.with_columns(exretavg.alias(\"exretavg\"))\n",
    "\n",
    "# # --- 6) quick sanity check: almost-zero nulls except sample start -------------\n",
    "# null_check = data.select(\n",
    "#     *[pl.col(f\"nimta_lag{k}_f\").is_null().sum().alias(f\"null_nimta_lag{k}_f\") for k in range(1,13)],\n",
    "#     *[pl.col(f\"exret_lag{k}_f\").is_null().sum().alias(f\"null_exret_lag{k}_f\") for k in range(1,13)],\n",
    "#     pl.col(\"nimtaavg\").is_null().sum().alias(\"null_nimtaavg\"),\n",
    "#     pl.col(\"exretavg\").is_null().sum().alias(\"null_exretavg\"),\n",
    "# )\n",
    "# null_check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "38ccf203",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# # exret should already be log(1+RET) - log(1+MKT)\n",
    "# phi = 2 ** (-1/3)  # weights halve each quarter\n",
    "\n",
    "# # 0) Exact monthly index for clean (t - k) joins\n",
    "# data = data.with_columns(\n",
    "#     (pl.col(\"date\").dt.year() * 12 + pl.col(\"date\").dt.month()).alias(\"mon_idx\")\n",
    "# )\n",
    "\n",
    "# # 1) Within-firm lags 1..12 for nimta & exret\n",
    "# lag_exprs = []\n",
    "# for col in [\"nimta\", \"exret\"]:\n",
    "#     lag_exprs += [\n",
    "#         pl.col(col).shift(k).over(\"PERMNO\").alias(f\"{col}_lag{k}\")\n",
    "#         for k in range(1, 13)\n",
    "#     ]\n",
    "# data = data.with_columns(lag_exprs)\n",
    "\n",
    "# # 2) Cross-sectional means at time t (by mon_idx)\n",
    "# means_t = (\n",
    "#     data.group_by(\"mon_idx\")\n",
    "#         .agg(\n",
    "#             nimta_mean_t = pl.col(\"nimta\").mean(),\n",
    "#             exret_mean_t = pl.col(\"exret\").mean()\n",
    "#         )\n",
    "# )\n",
    "\n",
    "# # 3) For each k, attach means for (t - k) and fill lag nulls with that month’s mean\n",
    "# for k in range(1, 13):\n",
    "#     # month index for the lag month\n",
    "#     data = data.with_columns((pl.col(\"mon_idx\") - k).alias(f\"mon_idx_k{k}\"))\n",
    "\n",
    "#     # bring in CS means for (t - k)\n",
    "#     data = data.join(\n",
    "#         means_t.rename({\n",
    "#             \"mon_idx\": f\"mon_idx_k{k}\",\n",
    "#             \"nimta_mean_t\": f\"nimta_mean_k{k}\",\n",
    "#             \"exret_mean_t\": f\"exret_mean_k{k}\",\n",
    "#         }),\n",
    "#         on=f\"mon_idx_k{k}\",\n",
    "#         how=\"left\",\n",
    "#     )\n",
    "\n",
    "#     # fill missing lags with CS mean at (t - k)\n",
    "#     data = data.with_columns([\n",
    "#         pl.when(pl.col(f\"nimta_lag{k}\").is_null())\n",
    "#           .then(pl.col(f\"nimta_mean_k{k}\"))\n",
    "#           .otherwise(pl.col(f\"nimta_lag{k}\"))\n",
    "#           .alias(f\"nimta_lag{k}_f\"),\n",
    "\n",
    "#         pl.when(pl.col(f\"exret_lag{k}\").is_null())\n",
    "#           .then(pl.col(f\"exret_mean_k{k}\"))\n",
    "#           .otherwise(pl.col(f\"exret_lag{k}\"))\n",
    "#           .alias(f\"exret_lag{k}_f\"),\n",
    "#     ])\n",
    "\n",
    "#     # tidy helpers\n",
    "#     data = data.drop([f\"mon_idx_k{k}\", f\"nimta_mean_k{k}\", f\"exret_mean_k{k}\"])\n",
    "\n",
    "# # 4) Fallback: if some lag is still null (e.g., CS mean itself missing), use pooled mean, then 0\n",
    "# pooled = data.select(\n",
    "#     pl.col(\"nimta\").mean().alias(\"nimta_pool_mean\"),\n",
    "#     pl.col(\"exret\").mean().alias(\"exret_pool_mean\"),\n",
    "# ).to_dicts()[0]\n",
    "# nimta_pool = pooled[\"nimta_pool_mean\"] if pooled[\"nimta_pool_mean\"] is not None else 0.0\n",
    "# exret_pool = pooled[\"exret_pool_mean\"] if pooled[\"exret_pool_mean\"] is not None else 0.0\n",
    "\n",
    "# for k in range(1, 13):\n",
    "#     data = data.with_columns([\n",
    "#         pl.coalesce([pl.col(f\"nimta_lag{k}_f\"), pl.lit(nimta_pool), pl.lit(0.0)]).alias(f\"nimta_lag{k}_f\"),\n",
    "#         pl.coalesce([pl.col(f\"exret_lag{k}_f\"), pl.lit(exret_pool), pl.lit(0.0)]).alias(f\"exret_lag{k}_f\"),\n",
    "#     ])\n",
    "\n",
    "# # 5) NIMTAAVG_{t-1..t-12} (3-month block average with φ^{0,3,6,9})\n",
    "# avg1 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(1, 4)])    # t-1..t-3\n",
    "# avg2 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(4, 7)])    # t-4..t-6\n",
    "# avg3 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(7, 10)])   # t-7..t-9\n",
    "# avg4 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(10, 13)])  # t-10..t-12\n",
    "\n",
    "# nimtaavg = ((1 - phi**3) / (1 - phi**12)) * (\n",
    "#     avg1 + (phi**3) * avg2 + (phi**6) * avg3 + (phi**9) * avg4\n",
    "# )\n",
    "\n",
    "# # 6) EXRETAVG_{t-1..t-12} (EW with φ^{0..11})\n",
    "# weights = [phi**(k-1) for k in range(1, 13)]\n",
    "# weighted_sum = pl.sum_horizontal([\n",
    "#     pl.col(f\"exret_lag{k}_f\") * weights[k-1] for k in range(1, 13)\n",
    "# ])\n",
    "# exretavg = ((1 - phi) / (1 - phi**12)) * weighted_sum\n",
    "\n",
    "# data = data.with_columns([\n",
    "#     nimtaavg.alias(\"nimtaavg\"),\n",
    "#     exretavg.alias(\"exretavg\"),\n",
    "# ])\n",
    "\n",
    "# # 7) Sanity check: should be ~0 except very early months\n",
    "# print(\n",
    "#     data.select(\n",
    "#         *[pl.col(f\"nimta_lag{k}_f\").is_null().sum().alias(f\"null_nimta_lag{k}_f\") for k in range(1,13)],\n",
    "#         *[pl.col(f\"exret_lag{k}_f\").is_null().sum().alias(f\"null_exret_lag{k}_f\") for k in range(1,13)],\n",
    "#         pl.col(\"nimtaavg\").is_null().sum().alias(\"null_nimtaavg\"),\n",
    "#         pl.col(\"exretavg\").is_null().sum().alias(\"null_exretavg\"),\n",
    "#     )\n",
    "# )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f142d73",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (1, 26)\n",
      "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
      "│ null_nimt ┆ null_nimt ┆ null_nimt ┆ null_nimt ┆ … ┆ null_exre ┆ null_exre ┆ null_nimt ┆ null_exr │\n",
      "│ a_lag1_f  ┆ a_lag2_f  ┆ a_lag3_f  ┆ a_lag4_f  ┆   ┆ t_lag11_f ┆ t_lag12_f ┆ aavg      ┆ etavg    │\n",
      "│ ---       ┆ ---       ┆ ---       ┆ ---       ┆   ┆ ---       ┆ ---       ┆ ---       ┆ ---      │\n",
      "│ u32       ┆ u32       ┆ u32       ┆ u32       ┆   ┆ u32       ┆ u32       ┆ u32       ┆ u32      │\n",
      "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
      "│ 1057992   ┆ 1011358   ┆ 530449    ┆ 1031369   ┆ … ┆ 859457    ┆ 819277    ┆ 253061    ┆ 0        │\n",
      "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘\n"
     ]
    }
   ],
   "source": [
    "# import polars as pl\n",
    "\n",
    "# phi = 2 ** (-1/3)  # weights halve each quarter\n",
    "\n",
    "# # Work lazily so Polars can optimize\n",
    "# df = data.lazy()\n",
    "\n",
    "# # 0) Month index (int for faster joins)\n",
    "# df = df.with_columns(\n",
    "#     (pl.col(\"date\").dt.year() * 12 + pl.col(\"date\").dt.month())\n",
    "#     .cast(pl.Int32)\n",
    "#     .alias(\"mon_idx\")\n",
    "# )\n",
    "\n",
    "# # 1) Cross-sectional means at time t (by mon_idx)\n",
    "# means_t = (\n",
    "#     df.group_by(\"mon_idx\")\n",
    "#       .agg(\n",
    "#           nimta_mean_t = pl.col(\"nimta\").mean(),\n",
    "#           exret_mean_t = pl.col(\"exret\").mean(),\n",
    "#       )\n",
    "# )\n",
    "\n",
    "# # 2) Build ONE long lag table for k=1..12\n",
    "# #    Keep both the join key at t (mon_idx_join) and the source lag month (mon_idx_src = t-k)\n",
    "# base = df.select([\"PERMNO\", \"mon_idx\", \"nimta\", \"exret\"])\n",
    "# lag_long = pl.concat([\n",
    "#     base.with_columns([\n",
    "#         pl.lit(k).alias(\"k\"),\n",
    "#         (pl.col(\"mon_idx\") + k).alias(\"mon_idx_join\"),  # to match rows at t\n",
    "#         pl.col(\"mon_idx\").alias(\"mon_idx_src\"),         # original month, i.e., t-k\n",
    "#     ]).rename({\n",
    "#         \"nimta\": \"nimta_val\",\n",
    "#         \"exret\": \"exret_val\",\n",
    "#     })\n",
    "#     for k in range(1, 13)\n",
    "# ]).lazy()\n",
    "\n",
    "# # 3) Join once to attach all k-lags (firm values from t-k) to rows at t\n",
    "# joined = df.join(\n",
    "#     lag_long,\n",
    "#     left_on=[\"PERMNO\", \"mon_idx\"],\n",
    "#     right_on=[\"PERMNO\", \"mon_idx_join\"],\n",
    "#     how=\"left\",\n",
    "# )\n",
    "\n",
    "# # 4) Bring in cross-sectional means for the *lag month* (t-k) via mon_idx_src\n",
    "# joined = joined.join(\n",
    "#     means_t,\n",
    "#     left_on=\"mon_idx_src\",\n",
    "#     right_on=\"mon_idx\",\n",
    "#     how=\"left\",\n",
    "# ).drop(\"mon_idx_right\")  # from the join; keep the left mon_idx\n",
    "\n",
    "# # 5) Fill missing lag values with that lag month’s CS mean (no pooled fallback)\n",
    "# joined = joined.with_columns([\n",
    "#     pl.coalesce([pl.col(\"nimta_val\"), pl.col(\"nimta_mean_t\")]).alias(\"nimta_filled\"),\n",
    "#     pl.coalesce([pl.col(\"exret_val\"), pl.col(\"exret_mean_t\")]).alias(\"exret_filled\"),\n",
    "# ])\n",
    "\n",
    "# # 6) Go wide without pivot(): groupby and pick the value for each k\n",
    "# nimta_wide = joined.group_by([\"PERMNO\", \"mon_idx\"]).agg(\n",
    "#     [pl.col(\"nimta_filled\").filter(pl.col(\"k\") == k).first().alias(f\"nimta_lag{k}_f\")\n",
    "#      for k in range(1, 13)]\n",
    "# )\n",
    "# exret_wide = joined.group_by([\"PERMNO\", \"mon_idx\"]).agg(\n",
    "#     [pl.col(\"exret_filled\").filter(pl.col(\"k\") == k).first().alias(f\"exret_lag{k}_f\")\n",
    "#      for k in range(1, 13)]\n",
    "# )\n",
    "\n",
    "# # 7) Rejoin lag blocks back to the base rows\n",
    "# df = (\n",
    "#     df.join(nimta_wide, on=[\"PERMNO\", \"mon_idx\"], how=\"left\")\n",
    "#       .join(exret_wide, on=[\"PERMNO\", \"mon_idx\"], how=\"left\")\n",
    "# )\n",
    "\n",
    "# # 8) Build the averages\n",
    "# avg1 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(1, 4)])     # t-1..t-3\n",
    "# avg2 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(4, 7)])     # t-4..t-6\n",
    "# avg3 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(7, 10)])    # t-7..t-9\n",
    "# avg4 = pl.mean_horizontal([pl.col(f\"nimta_lag{k}_f\") for k in range(10, 13)])   # t-10..t-12\n",
    "\n",
    "# nimtaavg_expr = ((1 - phi**3) / (1 - phi**12)) * (\n",
    "#     avg1 + (phi**3) * avg2 + (phi**6) * avg3 + (phi**9) * avg4\n",
    "# )\n",
    "\n",
    "# weights = [phi**(k-1) for k in range(1, 13)]\n",
    "# exretavg_expr = ((1 - phi) / (1 - phi**12)) * pl.sum_horizontal(\n",
    "#     [pl.col(f\"exret_lag{k}_f\") * weights[k-1] for k in range(1, 13)]\n",
    "# )\n",
    "\n",
    "# df = df.with_columns([\n",
    "#     nimtaavg_expr.alias(\"nimtaavg\"),\n",
    "#     exretavg_expr.alias(\"exretavg\"),\n",
    "# ])\n",
    "\n",
    "# # 9) Materialize\n",
    "# data = df.collect()\n",
    "\n",
    "# # (Optional) quick null check\n",
    "# print(\n",
    "#     data.select(\n",
    "#         *[pl.col(f\"nimta_lag{k}_f\").is_null().sum().alias(f\"null_nimta_lag{k}_f\") for k in range(1, 13)],\n",
    "#         *[pl.col(f\"exret_lag{k}_f\").is_null().sum().alias(f\"null_exret_lag{k}_f\") for k in range(1, 13)],\n",
    "#         pl.col(\"nimtaavg\").is_null().sum().alias(\"null_nimtaavg\"),\n",
    "#         pl.col(\"exretavg\").is_null().sum().alias(\"null_exretavg\"),\n",
    "#     )\n",
    "# )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "5590434b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#winsorize the price\n",
    "data = data.with_columns(\n",
    "    pl.when(pl.col(\"PRC\") > 15)\n",
    "      .then(15)\n",
    "      .otherwise(pl.col(\"PRC\"))\n",
    "      .alias(\"prc_winsor\")\n",
    ")\n",
    "\n",
    "#log it\n",
    "data = data.with_columns(\n",
    "    pl.col(\"prc_winsor\").log().alias(\"log_prc\")\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca3dba88",
   "metadata": {},
   "source": [
    "\"In order to further limit the influence of outliers, including those firms whose\n",
    "book equity has been adjusted as above, we winsorize the market-to-book ratio\n",
    "and all other variables in our model at the 5th and 95th percentiles of their\n",
    "pooled distributions across all firm-months. That is, we replace any observation\n",
    "below the 5th percentile with the 5th percentile, and any observation above the\n",
    "95th percentile with the 95th percentile.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "1223ba0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Variables to winsorize\n",
    "vars_to_winsor = [\n",
    "    \"mbq\",        # Market-to-Book\n",
    "    \"nimtaavg\",\n",
    "    \"tlmta\",\n",
    "    \"cshmta\",\n",
    "    \"rsize\",\n",
    "    \"exretavg\",\n",
    "    \"sigma\",\n",
    "    \"log_prc\",\n",
    "]\n",
    "\n",
    "# 1. Clean infinities -> null so they don't pollute quantiles\n",
    "data = data.with_columns([\n",
    "    pl.when(pl.col(c).is_infinite())\n",
    "      .then(None)\n",
    "      .otherwise(pl.col(c))\n",
    "      .alias(c)\n",
    "    for c in vars_to_winsor\n",
    "])\n",
    "\n",
    "# 2. Compute pooled 5% / 95% cutoffs\n",
    "qdf = data.select(\n",
    "    *[pl.col(c).quantile(0.05).alias(f\"{c}_lo\") for c in vars_to_winsor],\n",
    "    *[pl.col(c).quantile(0.95).alias(f\"{c}_hi\") for c in vars_to_winsor],\n",
    ").to_dicts()[0]\n",
    "\n",
    "# 3. Apply winsorization; keep originals, add *_w columns\n",
    "for c in vars_to_winsor:\n",
    "    lo = qdf[f\"{c}_lo\"]\n",
    "    hi = qdf[f\"{c}_hi\"]\n",
    "    data = data.with_columns(\n",
    "        pl.when(pl.col(c) < lo).then(lo)\n",
    "         .when(pl.col(c) > hi).then(hi)\n",
    "         .otherwise(pl.col(c))\n",
    "         .alias(f\"{c}_w\")\n",
    "    )\n",
    "\n",
    "# After this, use *_w columns in the model:\n",
    "# mbq_w, nimtaavg_w, tlmta_w, cshmta_w, rsize_w, exretavg_w, sigma_w, log_prc_w\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c332c65f",
   "metadata": {},
   "source": [
    "    \"mbq\",          \n",
    "    \"nimtaavg\",\n",
    "    \"tlmta\",\n",
    "    \"cshmta\",\n",
    "    \"rsize\",\n",
    "    \"exretavg\",\n",
    "    \"sigma\",\n",
    "    \"log_prc\",\n",
    "\n",
    "    699_118 - mbq_w\n",
    "    2_561_893 - nimtaavg_w\n",
    "    739_971 - tlmta_w\n",
    "    735_712 - cshmta_w\n",
    "    2_483_325 - rsize_w\n",
    "    2_181_612 - exretavg_w\n",
    "    2_559_403 - sigma_w\n",
    "    2_483_399 - log_prc_w\n",
    "    \n",
    "    \n",
    "    \n",
    "    \n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71e3491a",
   "metadata": {},
   "source": [
    "#### Logisitic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "54f57893",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.001046\n",
      "         Iterations 17\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                failure   No. Observations:              1224634\n",
      "Model:                          Logit   Df Residuals:                  1224625\n",
      "Method:                           MLE   Df Model:                            8\n",
      "Date:                Sat, 20 Sep 2025   Pseudo R-squ.:                  0.2332\n",
      "Time:                        17:15:24   Log-Likelihood:                -1281.4\n",
      "converged:                       True   LL-Null:                       -1671.1\n",
      "Covariance Type:            nonrobust   LLR p-value:                5.470e-163\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const        -20.8085      2.204     -9.441      0.000     -25.128     -16.489\n",
      "nimtaavg_w   -38.1556      7.422     -5.141      0.000     -52.702     -23.609\n",
      "tlmta_w        1.4743      0.529      2.786      0.005       0.437       2.511\n",
      "cshmta_w       1.3336      1.629      0.819      0.413      -1.859       4.526\n",
      "rsize_w       -0.8672      0.163     -5.327      0.000      -1.186      -0.548\n",
      "exretavg_w    -8.3508      2.072     -4.029      0.000     -12.413      -4.289\n",
      "sigma_w        0.5974      0.262      2.283      0.022       0.084       1.110\n",
      "log_prc_w     -1.6494      0.243     -6.785      0.000      -2.126      -1.173\n",
      "mbq_w          0.0764      0.059      1.288      0.198      -0.040       0.193\n",
      "==============================================================================\n",
      "\n",
      "Possibly complete quasi-separation: A fraction 0.86 of observations can be\n",
      "perfectly predicted. This might indicate that there is complete\n",
      "quasi-separation. In this case some parameters will not be identified.\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "\n",
    "# --- define in-sample period ---\n",
    "start = pl.date(1965, 1, 1)   # Jan 1965\n",
    "end   = pl.date(2003, 12, 31) # Dec 2003\n",
    "\n",
    "# filter in Polars\n",
    "in_sample = data.filter(\n",
    "    (pl.col(\"date\") >= start) & (pl.col(\"date\") <= end)\n",
    ")\n",
    "\n",
    "# choose predictors\n",
    "predictors = [\n",
    "    \"nimtaavg_w\",\n",
    "    \"tlmta_w\",\n",
    "    \"cshmta_w\",\n",
    "    \"rsize_w\",\n",
    "    \"exretavg_w\",\n",
    "    \"sigma_w\",\n",
    "    \"log_prc_w\",\n",
    "    \"mbq_w\",  \n",
    "]\n",
    "\n",
    "# drop rows with missing data in predictors or failure\n",
    "reg_data = in_sample.select([\"failure\"] + predictors).drop_nulls().to_pandas()\n",
    "\n",
    "X = reg_data[predictors]\n",
    "y = reg_data[\"failure\"]\n",
    "\n",
    "# add constant (intercept)\n",
    "X = sm.add_constant(X)\n",
    "\n",
    "# fit logit model\n",
    "logit_model = sm.Logit(y, X)\n",
    "result = logit_model.fit()\n",
    "\n",
    "print(result.summary())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "8dceac53",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (9, 10)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>mbq_w</th><th>nimtaavg_w</th><th>tlmta_w</th><th>cshmta_w</th><th>rsize_w</th><th>exretavg_w</th><th>sigma_w</th><th>log_prc_w</th><th>failure</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>2.113539e6</td><td>2.308832e6</td><td>2.561893e6</td><td>2.561893e6</td><td>2.483325e6</td><td>2.477834e6</td><td>2.559403e6</td><td>2.483399e6</td><td>2.561893e6</td></tr><tr><td>&quot;null_count&quot;</td><td>448354.0</td><td>253061.0</td><td>0.0</td><td>0.0</td><td>78568.0</td><td>84059.0</td><td>2490.0</td><td>78494.0</td><td>0.0</td></tr><tr><td>&quot;mean&quot;</td><td>2.595331</td><td>-0.001425</td><td>0.459793</td><td>0.094222</td><td>-10.406154</td><td>-0.004943</td><td>0.517981</td><td>2.052299</td><td>0.001813</td></tr><tr><td>&quot;std&quot;</td><td>1.700863</td><td>0.010594</td><td>0.171082</td><td>0.046979</td><td>1.936851</td><td>0.034518</td><td>0.302758</td><td>0.871789</td><td>0.042542</td></tr><tr><td>&quot;min&quot;</td><td>0.219315</td><td>-0.027256</td><td>0.128681</td><td>0.011719</td><td>-13.650849</td><td>-0.081898</td><td>0.160525</td><td>-0.083382</td><td>0.0</td></tr><tr><td>&quot;25%&quot;</td><td>1.291917</td><td>-0.00582</td><td>0.380871</td><td>0.072954</td><td>-11.893857</td><td>-0.023364</td><td>0.290345</td><td>1.578979</td><td>0.0</td></tr><tr><td>&quot;50%&quot;</td><td>2.335609</td><td>-0.000493</td><td>0.435839</td><td>0.091193</td><td>-10.520089</td><td>-0.001789</td><td>0.435146</td><td>2.545531</td><td>0.0</td></tr><tr><td>&quot;75%&quot;</td><td>3.344956</td><td>0.005466</td><td>0.539183</td><td>0.109334</td><td>-9.013639</td><td>0.016508</td><td>0.659425</td><td>2.70805</td><td>0.0</td></tr><tr><td>&quot;max&quot;</td><td>7.220968</td><td>0.014086</td><td>0.884938</td><td>0.217781</td><td>-6.72478</td><td>0.057827</td><td>1.287601</td><td>2.70805</td><td>1.0</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (9, 10)\n",
       "┌───────────┬───────────┬───────────┬───────────┬───┬───────────┬───────────┬───────────┬──────────┐\n",
       "│ statistic ┆ mbq_w     ┆ nimtaavg_ ┆ tlmta_w   ┆ … ┆ exretavg_ ┆ sigma_w   ┆ log_prc_w ┆ failure  │\n",
       "│ ---       ┆ ---       ┆ w         ┆ ---       ┆   ┆ w         ┆ ---       ┆ ---       ┆ ---      │\n",
       "│ str       ┆ f64       ┆ ---       ┆ f64       ┆   ┆ ---       ┆ f64       ┆ f64       ┆ f64      │\n",
       "│           ┆           ┆ f64       ┆           ┆   ┆ f64       ┆           ┆           ┆          │\n",
       "╞═══════════╪═══════════╪═══════════╪═══════════╪═══╪═══════════╪═══════════╪═══════════╪══════════╡\n",
       "│ count     ┆ 2.113539e ┆ 2.308832e ┆ 2.561893e ┆ … ┆ 2.477834e ┆ 2.559403e ┆ 2.483399e ┆ 2.561893 │\n",
       "│           ┆ 6         ┆ 6         ┆ 6         ┆   ┆ 6         ┆ 6         ┆ 6         ┆ e6       │\n",
       "│ null_coun ┆ 448354.0  ┆ 253061.0  ┆ 0.0       ┆ … ┆ 84059.0   ┆ 2490.0    ┆ 78494.0   ┆ 0.0      │\n",
       "│ t         ┆           ┆           ┆           ┆   ┆           ┆           ┆           ┆          │\n",
       "│ mean      ┆ 2.595331  ┆ -0.001425 ┆ 0.459793  ┆ … ┆ -0.004943 ┆ 0.517981  ┆ 2.052299  ┆ 0.001813 │\n",
       "│ std       ┆ 1.700863  ┆ 0.010594  ┆ 0.171082  ┆ … ┆ 0.034518  ┆ 0.302758  ┆ 0.871789  ┆ 0.042542 │\n",
       "│ min       ┆ 0.219315  ┆ -0.027256 ┆ 0.128681  ┆ … ┆ -0.081898 ┆ 0.160525  ┆ -0.083382 ┆ 0.0      │\n",
       "│ 25%       ┆ 1.291917  ┆ -0.00582  ┆ 0.380871  ┆ … ┆ -0.023364 ┆ 0.290345  ┆ 1.578979  ┆ 0.0      │\n",
       "│ 50%       ┆ 2.335609  ┆ -0.000493 ┆ 0.435839  ┆ … ┆ -0.001789 ┆ 0.435146  ┆ 2.545531  ┆ 0.0      │\n",
       "│ 75%       ┆ 3.344956  ┆ 0.005466  ┆ 0.539183  ┆ … ┆ 0.016508  ┆ 0.659425  ┆ 2.70805   ┆ 0.0      │\n",
       "│ max       ┆ 7.220968  ┆ 0.014086  ┆ 0.884938  ┆ … ┆ 0.057827  ┆ 1.287601  ┆ 2.70805   ┆ 1.0      │\n",
       "└───────────┴───────────┴───────────┴───────────┴───┴───────────┴───────────┴───────────┴──────────┘"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "insample_vars = [\n",
    "    \"mbq_w\",\n",
    "    \"nimtaavg_w\",\n",
    "    \"tlmta_w\",\n",
    "    \"cshmta_w\",\n",
    "    \"rsize_w\",\n",
    "    \"exretavg_w\",\n",
    "    \"sigma_w\",\n",
    "    \"log_prc_w\",\n",
    "    \"failure\"\n",
    "]\n",
    "\n",
    "# select those columns and describe\n",
    "desc = data.select(insample_vars).describe()\n",
    "\n",
    "desc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "331b21d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (2_561_893, 119)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>PERMNO</th><th>date</th><th>SHRCD</th><th>EXCHCD</th><th>CUSIP</th><th>BIDLO</th><th>ASKHI</th><th>PRC</th><th>VOL</th><th>RET</th><th>SHROUT</th><th>RETX</th><th>NCUSIP</th><th>TICKER</th><th>DLAMT</th><th>DLPDT</th><th>DLSTCD</th><th>DLRETX</th><th>DLPRC</th><th>DLRET</th><th>costat</th><th>curcdq</th><th>datafmt</th><th>indfmt</th><th>consol</th><th>gvkey</th><th>cusip</th><th>atq</th><th>cheq</th><th>ltq</th><th>niq</th><th>pstkrq</th><th>seqq</th><th>txditcq</th><th>LINKTYPE</th><th>LPERMCO</th><th>LINKDT</th><th>&hellip;</th><th>exret_lag2_f</th><th>nimta_lag3_f</th><th>exret_lag3_f</th><th>nimta_lag4_f</th><th>exret_lag4_f</th><th>nimta_lag5_f</th><th>exret_lag5_f</th><th>nimta_lag6_f</th><th>exret_lag6_f</th><th>nimta_lag7_f</th><th>exret_lag7_f</th><th>nimta_lag8_f</th><th>exret_lag8_f</th><th>nimta_lag9_f</th><th>exret_lag9_f</th><th>nimta_lag10_f</th><th>exret_lag10_f</th><th>nimta_lag11_f</th><th>exret_lag11_f</th><th>nimta_lag12_f</th><th>exret_lag12_f</th><th>nimtaavg</th><th>exretavg</th><th>prc_winsor</th><th>log_prc</th><th>sigma</th><th>mbq_w</th><th>nimtaavg_w</th><th>tlmta_w</th><th>cshmta_w</th><th>rsize_w</th><th>exretavg_w</th><th>sigma_w</th><th>log_prc_w</th><th>failure</th><th>mon_idx</th><th>sigma_right</th></tr><tr><td>i64</td><td>date</td><td>i64</td><td>i64</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td><td>f32</td><td>i64</td><td>str</td><td>str</td><td>str</td><td>f64</td><td>str</td><td>i64</td><td>str</td><td>f64</td><td>f32</td><td>str</td><td>str</td><td>str</td><td>str</td><td>str</td><td>i64</td><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>str</td><td>i64</td><td>str</td><td>&hellip;</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f32</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f32</td><td>f64</td><td>i8</td><td>i32</td><td>f32</td></tr></thead><tbody><tr><td>21898</td><td>2022-11-30</td><td>11</td><td>1</td><td>&quot;18512310&quot;</td><td>15.21</td><td>18.76</td><td>18.76</td><td>77651</td><td>0.151627</td><td>59226</td><td>&quot;0.151627&quot;</td><td>&quot;18512310&quot;</td><td>&quot;CWAN&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&hellip;</td><td>0.184466</td><td>-0.010081</td><td>0.229853</td><td>0.00052</td><td>-0.070997</td><td>-0.0293</td><td>-0.217653</td><td>-0.012122</td><td>0.020164</td><td>0.000099</td><td>0.184924</td><td>-0.002489</td><td>-0.244457</td><td>-0.00709</td><td>0.010484</td><td>-0.005442</td><td>-0.022806</td><td>-0.01128</td><td>-0.063067</td><td>0.001516</td><td>-0.061344</td><td>-0.009324</td><td>0.011895</td><td>15.0</td><td>2.70805</td><td>0.465144</td><td>4.510167</td><td>-0.009324</td><td>0.089685</td><td>0.238847</td><td>-10.326258</td><td>0.011895</td><td>0.465144</td><td>2.70805</td><td>0</td><td>24275</td><td>0.465144</td></tr><tr><td>79772</td><td>1994-02-28</td><td>11</td><td>2</td><td>&quot;89557G10&quot;</td><td>5.375</td><td>6.375</td><td>5.75</td><td>2463</td><td>-0.061224</td><td>2933</td><td>&quot;-0.061224&quot;</td><td>&quot;89557G10&quot;</td><td>&quot;NRG&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&hellip;</td><td>-0.101013</td><td>-0.002916</td><td>-0.101013</td><td>-0.005901</td><td>-0.050183</td><td>-0.002706</td><td>0.022994</td><td>-0.00488</td><td>-inf</td><td>-0.005901</td><td>-inf</td><td>-0.002619</td><td>-0.005862</td><td>-0.005901</td><td>-inf</td><td>-0.005823</td><td>-inf</td><td>-0.005511</td><td>-0.002792</td><td>-0.005901</td><td>-inf</td><td>-0.006909</td><td>null</td><td>5.75</td><td>1.7492</td><td>0.475529</td><td>2.936575</td><td>-0.006909</td><td>0.182702</td><td>0.096342</td><td>-12.206341</td><td>null</td><td>0.475529</td><td>1.7492</td><td>0</td><td>23930</td><td>0.475529</td></tr><tr><td>22115</td><td>2021-12-31</td><td>11</td><td>1</td><td>&quot;43353710&quot;</td><td>13.46</td><td>17.75</td><td>16.0</td><td>122205</td><td>-0.137931</td><td>79391</td><td>&quot;-0.137931&quot;</td><td>&quot;43353710&quot;</td><td>&quot;HRT&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;I&quot;</td><td>&quot;USD&quot;</td><td>&quot;STD&quot;</td><td>&quot;INDL&quot;</td><td>&quot;C&quot;</td><td>39831</td><td>&quot;433537107&quot;</td><td>1523.762</td><td>116.214</td><td>1078.045</td><td>-12.966</td><td>0.0</td><td>445.717</td><td>14.765</td><td>&quot;LC&quot;</td><td>58794</td><td>&quot;2021-11-01&quot;</td><td>&hellip;</td><td>-inf</td><td>-0.007204</td><td>0.008446</td><td>0.001429</td><td>-0.015645</td><td>-0.005901</td><td>-inf</td><td>-0.005582</td><td>-0.004358</td><td>-0.005901</td><td>-inf</td><td>-0.007509</td><td>-0.049228</td><td>-0.002548</td><td>-0.043851</td><td>-0.005901</td><td>-inf</td><td>-0.005901</td><td>-inf</td><td>-0.008498</td><td>0.034485</td><td>-0.004114</td><td>null</td><td>15.0</td><td>2.70805</td><td>null</td><td>null</td><td>-0.004114</td><td>null</td><td>null</td><td>-10.366335</td><td>null</td><td>null</td><td>2.70805</td><td>0</td><td>24264</td><td>null</td></tr><tr><td>80054</td><td>1995-05-31</td><td>11</td><td>3</td><td>&quot;58470H10&quot;</td><td>2.5</td><td>3.25</td><td>3.0</td><td>4379</td><td>0.0</td><td>4176</td><td>&quot;0.000000&quot;</td><td>&quot;92848610&quot;</td><td>&quot;VITA&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&hellip;</td><td>-0.149849</td><td>-0.000648</td><td>-0.10195</td><td>-0.001466</td><td>0.017317</td><td>-0.005901</td><td>0.049998</td><td>-0.004211</td><td>0.027266</td><td>-0.004983</td><td>0.013059</td><td>0.00619</td><td>0.027178</td><td>-0.006674</td><td>-0.038318</td><td>-0.005901</td><td>0.022133</td><td>0.002244</td><td>-0.028683</td><td>-0.004625</td><td>0.015084</td><td>-0.003087</td><td>-0.065689</td><td>3.0</td><td>1.098612</td><td>0.782969</td><td>null</td><td>-0.003087</td><td>null</td><td>null</td><td>-12.601176</td><td>-0.065689</td><td>0.782969</td><td>1.098612</td><td>0</td><td>23945</td><td>0.782969</td></tr><tr><td>72232</td><td>1994-03-31</td><td>11</td><td>3</td><td>&quot;84856510&quot;</td><td>3.5</td><td>4.125</td><td>3.8125</td><td>765</td><td>-0.016129</td><td>3065</td><td>&quot;-0.016129&quot;</td><td>&quot;84856510&quot;</td><td>&quot;SPIR&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;A&quot;</td><td>&quot;USD&quot;</td><td>&quot;STD&quot;</td><td>&quot;INDL&quot;</td><td>&quot;C&quot;</td><td>9954</td><td>&quot;848565107&quot;</td><td>11.895</td><td>0.085</td><td>3.647</td><td>0.042</td><td>0.0</td><td>8.248</td><td>0.0</td><td>&quot;LU&quot;</td><td>6688</td><td>&quot;1983-12-13&quot;</td><td>&hellip;</td><td>-0.071205</td><td>0.014072</td><td>-0.153141</td><td>-0.002916</td><td>0.012995</td><td>0.012209</td><td>0.07673</td><td>-0.002706</td><td>0.26539</td><td>0.007743</td><td>-0.045206</td><td>-0.070975</td><td>0.121056</td><td>-0.002619</td><td>-0.113834</td><td>-0.025749</td><td>-0.297739</td><td>-0.005823</td><td>0.083516</td><td>-0.005511</td><td>0.074317</td><td>0.000443</td><td>0.040684</td><td>3.8125</td><td>1.338285</td><td>1.085173</td><td>null</td><td>0.000443</td><td>null</td><td>null</td><td>-12.54549</td><td>0.040684</td><td>1.085173</td><td>1.338285</td><td>0</td><td>23931</td><td>1.085173</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>23916</td><td>2012-10-31</td><td>11</td><td>1</td><td>&quot;17856610&quot;</td><td>48.04</td><td>52.6</td><td>51.1</td><td>84146</td><td>-0.00796</td><td>53190</td><td>&quot;-0.007960&quot;</td><td>&quot;17856610&quot;</td><td>&quot;CYN&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&hellip;</td><td>0.006847</td><td>0.002001</td><td>-0.004883</td><td>-0.005901</td><td>0.027152</td><td>-0.000225</td><td>-0.015669</td><td>0.00069</td><td>0.000532</td><td>0.001785</td><td>0.005072</td><td>0.00399</td><td>0.018767</td><td>0.002119</td><td>-0.098498</td><td>-0.005901</td><td>-0.115912</td><td>0.001767</td><td>-0.019197</td><td>0.001282</td><td>0.003385</td><td>-0.000123</td><td>0.001059</td><td>15.0</td><td>2.70805</td><td>0.204839</td><td>null</td><td>-0.000123</td><td>null</td><td>null</td><td>-8.499307</td><td>0.001059</td><td>0.204839</td><td>2.70805</td><td>0</td><td>24154</td><td>0.204839</td></tr><tr><td>89040</td><td>2003-06-30</td><td>11</td><td>3</td><td>&quot;58404W10&quot;</td><td>5.09</td><td>6.46</td><td>5.95</td><td>19440</td><td>0.051237</td><td>17943</td><td>&quot;0.051237&quot;</td><td>&quot;58404W10&quot;</td><td>&quot;MDTH&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&quot;I&quot;</td><td>&quot;USD&quot;</td><td>&quot;STD&quot;</td><td>&quot;INDL&quot;</td><td>&quot;C&quot;</td><td>143605</td><td>&quot;58404W109&quot;</td><td>799.771</td><td>111.075</td><td>454.194</td><td>0.778</td><td>0.0</td><td>326.85</td><td>3.663</td><td>&quot;LC&quot;</td><td>41817</td><td>&quot;2001-07-24&quot;</td><td>&hellip;</td><td>-0.28431</td><td>0.000735</td><td>-0.33392</td><td>-0.025243</td><td>-0.006794</td><td>0.002427</td><td>0.037537</td><td>-0.021961</td><td>-0.086449</td><td>-0.005901</td><td>-0.267449</td><td>-0.024549</td><td>0.073479</td><td>0.00227</td><td>0.078669</td><td>-0.005901</td><td>0.096619</td><td>0.008045</td><td>-0.197449</td><td>-0.005901</td><td>0.273282</td><td>-0.008229</td><td>-0.151392</td><td>5.95</td><td>1.783391</td><td>0.848216</td><td>0.323523</td><td>-0.008229</td><td>0.801859</td><td>0.195838</td><td>-11.316749</td><td>-0.107826</td><td>0.848216</td><td>1.783391</td><td>0</td><td>24042</td><td>0.848216</td></tr><tr><td>83896</td><td>2006-03-31</td><td>11</td><td>0</td><td>&quot;74621T20&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>13854</td><td>&quot;B&quot;</td><td>&quot;74621810&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&hellip;</td><td>0.041843</td><td>-0.005901</td><td>-inf</td><td>-0.003027</td><td>-0.010755</td><td>-0.007325</td><td>-0.029154</td><td>-0.002845</td><td>-0.012357</td><td>-0.002774</td><td>-0.01011</td><td>-0.005901</td><td>-inf</td><td>-0.003542</td><td>0.023831</td><td>-0.002609</td><td>-inf</td><td>-0.005901</td><td>-inf</td><td>-0.000925</td><td>-0.020956</td><td>-0.003113</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>-0.003113</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>0</td><td>24075</td><td>null</td></tr><tr><td>57665</td><td>2006-01-31</td><td>11</td><td>1</td><td>&quot;65410610&quot;</td><td>80.95</td><td>87.3</td><td>80.95</td><td>434383</td><td>-0.067289</td><td>194730</td><td>&quot;-0.067289&quot;</td><td>&quot;65410610&quot;</td><td>&quot;NKE&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&hellip;</td><td>0.046503</td><td>-0.007325</td><td>0.030632</td><td>0.018777</td><td>-0.048839</td><td>-0.002774</td><td>0.05517</td><td>0.014469</td><td>0.038308</td><td>-0.003542</td><td>-0.020465</td><td>-0.002609</td><td>-0.015039</td><td>0.01352</td><td>-0.020186</td><td>-0.000925</td><td>0.039614</td><td>0.017491</td><td>0.002505</td><td>-0.000673</td><td>0.038515</td><td>0.004975</td><td>0.009436</td><td>15.0</td><td>2.70805</td><td>0.184913</td><td>null</td><td>0.004975</td><td>null</td><td>null</td><td>-6.717646</td><td>0.009436</td><td>0.184913</td><td>2.70805</td><td>0</td><td>24073</td><td>0.184913</td></tr><tr><td>87134</td><td>2001-05-31</td><td>11</td><td>1</td><td>&quot;09367910&quot;</td><td>16.99</td><td>21.51</td><td>21.51</td><td>83333</td><td>0.154424</td><td>31046</td><td>&quot;0.153351&quot;</td><td>&quot;09367910&quot;</td><td>&quot;BBI&quot;</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>null</td><td>&hellip;</td><td>0.325877</td><td>-0.016286</td><td>0.252138</td><td>-0.01576</td><td>0.127002</td><td>-0.005901</td><td>0.012028</td><td>-0.010353</td><td>-0.233547</td><td>-0.015536</td><td>0.160437</td><td>-0.001542</td><td>-0.002045</td><td>-0.011088</td><td>-0.065948</td><td>-0.009542</td><td>-0.406221</td><td>-0.002394</td><td>0.073307</td><td>-0.002985</td><td>0.023808</td><td>-0.013259</td><td>0.119784</td><td>15.0</td><td>2.70805</td><td>0.56605</td><td>null</td><td>-0.013259</td><td>null</td><td>null</td><td>-9.717927</td><td>0.073298</td><td>0.56605</td><td>2.70805</td><td>0</td><td>24017</td><td>0.56605</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (2_561_893, 119)\n",
       "┌────────┬────────────┬───────┬────────┬───┬───────────┬─────────┬─────────┬─────────────┐\n",
       "│ PERMNO ┆ date       ┆ SHRCD ┆ EXCHCD ┆ … ┆ log_prc_w ┆ failure ┆ mon_idx ┆ sigma_right │\n",
       "│ ---    ┆ ---        ┆ ---   ┆ ---    ┆   ┆ ---       ┆ ---     ┆ ---     ┆ ---         │\n",
       "│ i64    ┆ date       ┆ i64   ┆ i64    ┆   ┆ f64       ┆ i8      ┆ i32     ┆ f32         │\n",
       "╞════════╪════════════╪═══════╪════════╪═══╪═══════════╪═════════╪═════════╪═════════════╡\n",
       "│ 21898  ┆ 2022-11-30 ┆ 11    ┆ 1      ┆ … ┆ 2.70805   ┆ 0       ┆ 24275   ┆ 0.465144    │\n",
       "│ 79772  ┆ 1994-02-28 ┆ 11    ┆ 2      ┆ … ┆ 1.7492    ┆ 0       ┆ 23930   ┆ 0.475529    │\n",
       "│ 22115  ┆ 2021-12-31 ┆ 11    ┆ 1      ┆ … ┆ 2.70805   ┆ 0       ┆ 24264   ┆ null        │\n",
       "│ 80054  ┆ 1995-05-31 ┆ 11    ┆ 3      ┆ … ┆ 1.098612  ┆ 0       ┆ 23945   ┆ 0.782969    │\n",
       "│ 72232  ┆ 1994-03-31 ┆ 11    ┆ 3      ┆ … ┆ 1.338285  ┆ 0       ┆ 23931   ┆ 1.085173    │\n",
       "│ …      ┆ …          ┆ …     ┆ …      ┆ … ┆ …         ┆ …       ┆ …       ┆ …           │\n",
       "│ 23916  ┆ 2012-10-31 ┆ 11    ┆ 1      ┆ … ┆ 2.70805   ┆ 0       ┆ 24154   ┆ 0.204839    │\n",
       "│ 89040  ┆ 2003-06-30 ┆ 11    ┆ 3      ┆ … ┆ 1.783391  ┆ 0       ┆ 24042   ┆ 0.848216    │\n",
       "│ 83896  ┆ 2006-03-31 ┆ 11    ┆ 0      ┆ … ┆ null      ┆ 0       ┆ 24075   ┆ null        │\n",
       "│ 57665  ┆ 2006-01-31 ┆ 11    ┆ 1      ┆ … ┆ 2.70805   ┆ 0       ┆ 24073   ┆ 0.184913    │\n",
       "│ 87134  ┆ 2001-05-31 ┆ 11    ┆ 1      ┆ … ┆ 2.70805   ┆ 0       ┆ 24017   ┆ 0.56605     │\n",
       "└────────┴────────────┴───────┴────────┴───┴───────────┴─────────┴─────────┴─────────────┘"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "3f12e95b",
   "metadata": {},
   "outputs": [
    {
     "ename": "ColumnNotFoundError",
     "evalue": "unable to find column \"cshoq\"; valid columns: [\"PERMNO\", \"date\", \"SHRCD\", \"EXCHCD\", \"CUSIP\", \"BIDLO\", \"ASKHI\", \"PRC\", \"VOL\", \"RET\", \"SHROUT\", \"RETX\", \"NCUSIP\", \"TICKER\", \"DLAMT\", \"DLPDT\", \"DLSTCD\", \"DLRETX\", \"DLPRC\", \"DLRET\", \"costat\", \"curcdq\", \"datafmt\", \"indfmt\", \"consol\", \"gvkey\", \"cusip\", \"atq\", \"cheq\", \"ltq\", \"niq\", \"pstkrq\", \"seqq\", \"txditcq\", \"LINKTYPE\", \"LPERMCO\", \"LINKDT\", \"LINKENDDT\", \"tic\", \"caldt\", \"totval\", \"totcnt\", \"usdval\", \"spindx\", \"sprtrn\", \"caldt_date\", \"beq\", \"meq\", \"taq_adjusted\", \"mbq\", \"rsize\", \"exret\", \"nimta\", \"tlmta\", \"cshmta\", \"nimta_lag1\", \"nimta_lag2\", \"nimta_lag3\", \"nimta_lag4\", \"nimta_lag5\", \"nimta_lag6\", \"nimta_lag7\", \"nimta_lag8\", \"nimta_lag9\", \"nimta_lag10\", \"nimta_lag11\", \"nimta_lag12\", \"exret_lag1\", \"exret_lag2\", \"exret_lag3\", \"exret_lag4\", \"exret_lag5\", \"exret_lag6\", \"exret_lag7\", \"exret_lag8\", \"exret_lag9\", \"exret_lag10\", \"exret_lag11\", \"exret_lag12\", \"nimta_lag1_f\", \"exret_lag1_f\", \"nimta_lag2_f\", \"exret_lag2_f\", \"nimta_lag3_f\", \"exret_lag3_f\", \"nimta_lag4_f\", \"exret_lag4_f\", \"nimta_lag5_f\", \"exret_lag5_f\", \"nimta_lag6_f\", \"exret_lag6_f\", \"nimta_lag7_f\", \"exret_lag7_f\", \"nimta_lag8_f\", \"exret_lag8_f\", \"nimta_lag9_f\", \"exret_lag9_f\", \"nimta_lag10_f\", \"exret_lag10_f\", \"nimta_lag11_f\", \"exret_lag11_f\", \"nimta_lag12_f\", \"exret_lag12_f\", \"nimtaavg\", \"exretavg\", \"prc_winsor\", \"log_prc\", \"sigma\", \"mbq_w\", \"nimtaavg_w\", \"tlmta_w\", \"cshmta_w\", \"rsize_w\", \"exretavg_w\", \"sigma_w\", \"log_prc_w\", \"failure\", \"mon_idx\", \"sigma_right\"]",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mColumnNotFoundError\u001b[39m                       Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[138]\u001b[39m\u001b[32m, line 29\u001b[39m\n\u001b[32m     25\u001b[39m \u001b[38;5;66;03m#in sample will be 1965-2003\u001b[39;00m\n\u001b[32m     26\u001b[39m data=data.filter(pl.col(\u001b[33m'\u001b[39m\u001b[33mdate\u001b[39m\u001b[33m'\u001b[39m)<(dt.date(\u001b[32m2004\u001b[39m,\u001b[32m1\u001b[39m,\u001b[32m1\u001b[39m))).sort([\u001b[33m'\u001b[39m\u001b[33mdate\u001b[39m\u001b[33m'\u001b[39m,\u001b[33m'\u001b[39m\u001b[33mPERMNO\u001b[39m\u001b[33m'\u001b[39m])\n\u001b[32m---> \u001b[39m\u001b[32m29\u001b[39m df = \u001b[43mdata\u001b[49m\u001b[43m.\u001b[49m\u001b[43mselect\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkeep_cols\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/sf_fall_2025/sf-quant-labs/.venv/lib/python3.13/site-packages/polars/dataframe/frame.py:9861\u001b[39m, in \u001b[36mDataFrame.select\u001b[39m\u001b[34m(self, *exprs, **named_exprs)\u001b[39m\n\u001b[32m   9777\u001b[39m \u001b[38;5;250m\u001b[39m\u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m   9778\u001b[39m \u001b[33;03mSelect columns from this DataFrame.\u001b[39;00m\n\u001b[32m   9779\u001b[39m \n\u001b[32m   (...)\u001b[39m\u001b[32m   9854\u001b[39m \u001b[33;03m└───────────┘\u001b[39;00m\n\u001b[32m   9855\u001b[39m \u001b[33;03m\"\"\"\u001b[39;00m\n\u001b[32m   9856\u001b[39m \u001b[38;5;28;01mfrom\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[34;01mpolars\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mlazyframe\u001b[39;00m\u001b[34;01m.\u001b[39;00m\u001b[34;01mopt_flags\u001b[39;00m\u001b[38;5;250m \u001b[39m\u001b[38;5;28;01mimport\u001b[39;00m QueryOptFlags\n\u001b[32m   9858\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m (\n\u001b[32m   9859\u001b[39m     \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mlazy\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   9860\u001b[39m \u001b[43m    \u001b[49m\u001b[43m.\u001b[49m\u001b[43mselect\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43mexprs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mnamed_exprs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m-> \u001b[39m\u001b[32m9861\u001b[39m \u001b[43m    \u001b[49m\u001b[43m.\u001b[49m\u001b[43mcollect\u001b[49m\u001b[43m(\u001b[49m\u001b[43moptimizations\u001b[49m\u001b[43m=\u001b[49m\u001b[43mQueryOptFlags\u001b[49m\u001b[43m.\u001b[49m\u001b[43m_eager\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   9862\u001b[39m )\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/sf_fall_2025/sf-quant-labs/.venv/lib/python3.13/site-packages/polars/_utils/deprecation.py:97\u001b[39m, in \u001b[36mdeprecate_streaming_parameter.<locals>.decorate.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m     93\u001b[39m         kwargs[\u001b[33m\"\u001b[39m\u001b[33mengine\u001b[39m\u001b[33m\"\u001b[39m] = \u001b[33m\"\u001b[39m\u001b[33min-memory\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m     95\u001b[39m     \u001b[38;5;28;01mdel\u001b[39;00m kwargs[\u001b[33m\"\u001b[39m\u001b[33mstreaming\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m---> \u001b[39m\u001b[32m97\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/sf_fall_2025/sf-quant-labs/.venv/lib/python3.13/site-packages/polars/lazyframe/opt_flags.py:330\u001b[39m, in \u001b[36mforward_old_opt_flags.<locals>.decorate.<locals>.wrapper\u001b[39m\u001b[34m(*args, **kwargs)\u001b[39m\n\u001b[32m    327\u001b[39m         optflags = cb(optflags, kwargs.pop(key))  \u001b[38;5;66;03m# type: ignore[no-untyped-call,unused-ignore]\u001b[39;00m\n\u001b[32m    329\u001b[39m kwargs[\u001b[33m\"\u001b[39m\u001b[33moptimizations\u001b[39m\u001b[33m\"\u001b[39m] = optflags\n\u001b[32m--> \u001b[39m\u001b[32m330\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mfunction\u001b[49m\u001b[43m(\u001b[49m\u001b[43m*\u001b[49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/sf_fall_2025/sf-quant-labs/.venv/lib/python3.13/site-packages/polars/lazyframe/frame.py:2335\u001b[39m, in \u001b[36mLazyFrame.collect\u001b[39m\u001b[34m(self, type_coercion, predicate_pushdown, projection_pushdown, simplify_expression, slice_pushdown, comm_subplan_elim, comm_subexpr_elim, cluster_with_columns, collapse_joins, no_optimization, engine, background, optimizations, **_kwargs)\u001b[39m\n\u001b[32m   2333\u001b[39m \u001b[38;5;66;03m# Only for testing purposes\u001b[39;00m\n\u001b[32m   2334\u001b[39m callback = _kwargs.get(\u001b[33m\"\u001b[39m\u001b[33mpost_opt_callback\u001b[39m\u001b[33m\"\u001b[39m, callback)\n\u001b[32m-> \u001b[39m\u001b[32m2335\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m wrap_df(\u001b[43mldf\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcollect\u001b[49m\u001b[43m(\u001b[49m\u001b[43mengine\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcallback\u001b[49m\u001b[43m)\u001b[49m)\n",
      "\u001b[31mColumnNotFoundError\u001b[39m: unable to find column \"cshoq\"; valid columns: [\"PERMNO\", \"date\", \"SHRCD\", \"EXCHCD\", \"CUSIP\", \"BIDLO\", \"ASKHI\", \"PRC\", \"VOL\", \"RET\", \"SHROUT\", \"RETX\", \"NCUSIP\", \"TICKER\", \"DLAMT\", \"DLPDT\", \"DLSTCD\", \"DLRETX\", \"DLPRC\", \"DLRET\", \"costat\", \"curcdq\", \"datafmt\", \"indfmt\", \"consol\", \"gvkey\", \"cusip\", \"atq\", \"cheq\", \"ltq\", \"niq\", \"pstkrq\", \"seqq\", \"txditcq\", \"LINKTYPE\", \"LPERMCO\", \"LINKDT\", \"LINKENDDT\", \"tic\", \"caldt\", \"totval\", \"totcnt\", \"usdval\", \"spindx\", \"sprtrn\", \"caldt_date\", \"beq\", \"meq\", \"taq_adjusted\", \"mbq\", \"rsize\", \"exret\", \"nimta\", \"tlmta\", \"cshmta\", \"nimta_lag1\", \"nimta_lag2\", \"nimta_lag3\", \"nimta_lag4\", \"nimta_lag5\", \"nimta_lag6\", \"nimta_lag7\", \"nimta_lag8\", \"nimta_lag9\", \"nimta_lag10\", \"nimta_lag11\", \"nimta_lag12\", \"exret_lag1\", \"exret_lag2\", \"exret_lag3\", \"exret_lag4\", \"exret_lag5\", \"exret_lag6\", \"exret_lag7\", \"exret_lag8\", \"exret_lag9\", \"exret_lag10\", \"exret_lag11\", \"exret_lag12\", \"nimta_lag1_f\", \"exret_lag1_f\", \"nimta_lag2_f\", \"exret_lag2_f\", \"nimta_lag3_f\", \"exret_lag3_f\", \"nimta_lag4_f\", \"exret_lag4_f\", \"nimta_lag5_f\", \"exret_lag5_f\", \"nimta_lag6_f\", \"exret_lag6_f\", \"nimta_lag7_f\", \"exret_lag7_f\", \"nimta_lag8_f\", \"exret_lag8_f\", \"nimta_lag9_f\", \"exret_lag9_f\", \"nimta_lag10_f\", \"exret_lag10_f\", \"nimta_lag11_f\", \"exret_lag11_f\", \"nimta_lag12_f\", \"exret_lag12_f\", \"nimtaavg\", \"exretavg\", \"prc_winsor\", \"log_prc\", \"sigma\", \"mbq_w\", \"nimtaavg_w\", \"tlmta_w\", \"cshmta_w\", \"rsize_w\", \"exretavg_w\", \"sigma_w\", \"log_prc_w\", \"failure\", \"mon_idx\", \"sigma_right\"]"
     ]
    }
   ],
   "source": [
    "keep_cols = [\n",
    "    # identifiers\n",
    "    \"PERMNO\", \"TICKER\",\n",
    "    \n",
    "    # time\n",
    "    \"date\",\n",
    "    \n",
    "    # CRSP stock info\n",
    "    \"PRC\", \"SHROUT\", \"RET\", \"RETX\", \"VOL\",'SHRCD',\n",
    "    \n",
    "    # Delisting info\n",
    "    \"DLSTCD\", \"DLRET\", \"DLRETX\",\n",
    "    \n",
    "    # Compustat fundamentals (quarterly)\n",
    "    \"atq\", \"cheq\", \"cshoq\", \"ltq\", \"niq\", \"seqq\",\n",
    "    \n",
    "    # S&P500 benchmark\n",
    "    \"totval\", \"sprtrn\"\n",
    "]\n",
    "\n",
    "#out of sample is 2004 to 2024\n",
    "out_of_sample=data.filter(pl.col('date')>(dt.date(2003,12,31))).sort(['date','PERMNO'])\n",
    "\n",
    "\n",
    "#in sample will be 1965-2003\n",
    "data=data.filter(pl.col('date')<(dt.date(2004,1,1))).sort(['date','PERMNO'])\n",
    "\n",
    "\n",
    "df = data.select(keep_cols)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c31aee1f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 0) Ensure proper dtypes up front\n",
    "num_cols = [\n",
    "    \"PRC\",\"SHROUT\",\"RET\",\"RETX\",\"DLRET\",\"DLRETX\",\n",
    "    \"atq\",\"cheq\",\"cshoq\",\"ltq\",\"niq\",\"seqq\",\n",
    "    \"totval\",\"sprtrn\"\n",
    "]\n",
    "df = df.with_columns([pl.col(c).cast(pl.Float64, strict=False) for c in num_cols])\n",
    "df = df.with_columns(pl.col(\"date\").cast(pl.Date, strict=False))\n",
    "\n",
    "# 1) Basics: abs price, mktcap\n",
    "df = df.with_columns([\n",
    "    pl.col(\"PRC\").abs().alias(\"prc_abs\"),\n",
    "    (pl.col(\"PRC\").abs() * pl.col(\"SHROUT\") * 1000).alias(\"mktcap\"),\n",
    "])\n",
    "\n",
    "# 2) RSIZE and EXRET need S&P fields; EXRET uses RETX\n",
    "df = df.with_columns([\n",
    "    (pl.col(\"mktcap\") / (pl.col(\"totval\")*pl.lit(1000))).log().alias(\"RSIZE\"),\n",
    "    (pl.col(\"RETX\") - pl.col(\"sprtrn\")).alias(\"exret\"),\n",
    "])\n",
    "\n",
    "# 3) Delisting-adjusted portfolio return\n",
    "df = df.with_columns(\n",
    "    ((1 + pl.col(\"RET\")).fill_null(1.0) * (1 + pl.col(\"DLRET\")).fill_null(1.0) - 1)\n",
    "    .alias(\"RET_adj\")\n",
    ")\n",
    "\n",
    "# 4) Market-assets denominator & book equity floor\n",
    "df = df.with_columns([\n",
    "    (pl.col(\"ltq\") + pl.col(\"mktcap\")).alias(\"mkt_assets\"),\n",
    "    pl.when(pl.col(\"seqq\") <= 0).then(pl.lit(1.0)).otherwise(pl.col(\"seqq\")).alias(\"seqq_pos\"),\n",
    "])\n",
    "\n",
    "# 5) Failure flags\n",
    "df = df.with_columns([\n",
    "    (pl.col(\"DLSTCD\") == 574).cast(pl.Int8).alias(\"BANKRUPT\"),\n",
    "    pl.col(\"DLSTCD\").is_between(500, 599).cast(pl.Int8).alias(\"FAILURE\"),\n",
    "])\n",
    "\n",
    "# 6) Ratios (accounting-based; will lag later)\n",
    "df = df.with_columns([\n",
    "    (pl.col(\"niq\") / pl.col(\"mkt_assets\")).alias(\"NIMTA\"),\n",
    "    (pl.col(\"ltq\") / pl.col(\"mkt_assets\")).alias(\"TLMTA\"),\n",
    "    (pl.col(\"cheq\") / pl.col(\"mkt_assets\")).alias(\"CASHMTA\"),\n",
    "    (pl.col(\"mktcap\") / pl.col(\"seqq_pos\")).alias(\"MB\"),\n",
    "    pl.col(\"prc_abs\").clip(15.0).log().alias(\"PRICE\"),\n",
    "])\n",
    "\n",
    "# 7) Lag accounting-based vars by 2 months within PERMNO\n",
    "acc_cols = [\"NIMTA\",\"TLMTA\",\"CASHMTA\",\"MB\"]\n",
    "df = df.sort([\"PERMNO\",\"date\"]).with_columns([\n",
    "    pl.col(c).shift(2).over(\"PERMNO\").alias(c) for c in acc_cols\n",
    "])\n",
    "\n",
    "# 8) Geometrically-weighted 12-month averages (λ=2/3)\n",
    "λ = 2/3\n",
    "weights = [λ**k for k in range(12)]\n",
    "norm = (1-λ) / (1-λ**12)\n",
    "\n",
    "def decayed_avg(colname: str, outname: str):\n",
    "    exprs = [\n",
    "        (pl.col(colname).fill_null(0.0).shift(k).over(\"PERMNO\") * w)\n",
    "        for k, w in enumerate(weights)\n",
    "    ]\n",
    "    return (pl.sum_horizontal(exprs) * norm).alias(outname)\n",
    "\n",
    "df = df.with_columns([\n",
    "    decayed_avg(\"NIMTA\", \"NIMTAAVG\"),\n",
    "    decayed_avg(\"exret\", \"EXRETAVG\"),\n",
    "])\n",
    "\n",
    "\n",
    "# 7. Merge into your monthly df\n",
    "df = df.join(sigma_m, on=[\"PERMNO\",\"date\"], how=\"left\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba2fb74b",
   "metadata": {},
   "outputs": [],
   "source": [
    "preds = [\"NIMTAAVG\",\"TLMTA\",\"EXRETAVG\",\"SIGMA\",\"RSIZE\",\"CASHMTA\",\"MB\",\"PRICE\"]\n",
    "\n",
    "# 1) make quantiles (one row per date, no conflicts yet)\n",
    "qtiles = (\n",
    "    df.group_by(\"date\")\n",
    "      .agg([pl.col(c).quantile(0.05).alias(f\"{c}_p5\") for c in preds] +\n",
    "           [pl.col(c).quantile(0.95).alias(f\"{c}_p95\") for c in preds])\n",
    ")\n",
    "\n",
    "# 2) drop any old quantile cols in df (from previous runs)\n",
    "qt_cols = [f\"{c}_p5\" for c in preds] + [f\"{c}_p95\" for c in preds]\n",
    "df = df.drop([c for c in qt_cols if c in df.columns])\n",
    "\n",
    "# 3) join (no suffix needed now)\n",
    "df = df.join(qtiles, on=\"date\", how=\"left\")\n",
    "\n",
    "# 4) clip using the expected names\n",
    "for c in preds:\n",
    "    df = df.with_columns(\n",
    "        pl.col(c).clip(\n",
    "            lower_bound=pl.col(f\"{c}_p5\"),\n",
    "            upper_bound=pl.col(f\"{c}_p95\")\n",
    "        ).alias(c)\n",
    "    )\n",
    "\n",
    "# 5) tidy up\n",
    "df = df.drop(qt_cols)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f211b28f",
   "metadata": {},
   "outputs": [],
   "source": [
    "keep_cols = [\n",
    "    \"PERMNO\",\"TICKER\",\"date\",\n",
    "    \"PRC\",\"SHROUT\",\"RET\",\"RETX\",\"VOL\",\"RET_adj\",\n",
    "    \"DLSTCD\",\"DLRET\",\"DLRETX\",\"BANKRUPT\",\"FAILURE\",\n",
    "    \"atq\",\"cheq\",\"cshoq\",\"ltq\",\"niq\",\"seqq\",\n",
    "    \"totval\",\"sprtrn\",\n",
    "    \"prc_abs\",\"mktcap\",\"mkt_assets\",\"seqq_pos\",\n",
    "    \"RSIZE\",\"exret\",\n",
    "    \"NIMTA\",\"TLMTA\",\"CASHMTA\",\"MB\",\"PRICE\",\n",
    "    \"NIMTAAVG\",\"EXRETAVG\",\"SIGMA\",'SHRCD'\n",
    "]\n",
    "\n",
    "df = df.select([c for c in keep_cols if c in df.columns])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4317f442",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:          FAILURE_lead1   No. Observations:                 2701\n",
      "Model:                          Logit   Df Residuals:                     2692\n",
      "Method:                           MLE   Df Model:                            8\n",
      "Date:                Thu, 18 Sep 2025   Pseudo R-squ.:                  0.6261\n",
      "Time:                        22:47:02   Log-Likelihood:                -682.31\n",
      "converged:                       True   LL-Null:                       -1824.7\n",
      "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
      "================================================================================\n",
      "                   coef    std err          z      P>|z|      [0.025      0.975]\n",
      "--------------------------------------------------------------------------------\n",
      "const           -3.2551      0.163    -20.010      0.000      -3.574      -2.936\n",
      "NIMTAAVG_std    -0.1656      0.035     -4.761      0.000      -0.234      -0.097\n",
      "TLMTA_std        0.3294      0.079      4.161      0.000       0.174       0.485\n",
      "EXRETAVG_std    -0.4120      0.050     -8.190      0.000      -0.511      -0.313\n",
      "SIGMA_std        0.2997      0.055      5.447      0.000       0.192       0.408\n",
      "RSIZE_std       -2.2593      0.137    -16.531      0.000      -2.527      -1.991\n",
      "CASHMTA_std     -0.1576      0.088     -1.794      0.073      -0.330       0.015\n",
      "MB_std           0.4462      0.061      7.350      0.000       0.327       0.565\n",
      "PRICE_std       -0.3432      0.171     -2.003      0.045      -0.679      -0.007\n",
      "================================================================================\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_1271887/2249977048.py:27: DeprecationWarning: `DataFrame.with_row_count` is deprecated; use `with_row_index` instead. Note that the default column name has changed from 'row_nr' to 'index'.\n",
      "  df = df.with_row_count(\"row_id\")\n"
     ]
    }
   ],
   "source": [
    "# --- CHS logit with standardized predictors (no sampling) ---\n",
    "\n",
    "import polars as pl\n",
    "import numpy as np\n",
    "import statsmodels.api as sm\n",
    "\n",
    "X_cols = [\"NIMTAAVG\",\"TLMTA\",\"EXRETAVG\",\"SIGMA\",\"RSIZE\",\"CASHMTA\",\"MB\",\"PRICE\"]\n",
    "DV = \"FAILURE\"  # or \"BANKRUPT\"\n",
    "\n",
    "# 0) standardize predictors (winsorize first, then standardize)\n",
    "for c in X_cols:\n",
    "    # compute mean/std as scalars\n",
    "    mu = df.select(pl.col(c).mean()).item()\n",
    "    sd = df.select(pl.col(c).std()).item()\n",
    "    if sd is None or sd == 0:\n",
    "        sd = 1.0  # avoid divide-by-zero; leaves column centered only\n",
    "    df = df.with_columns(((pl.col(c) - mu) / sd).alias(f\"{c}_std\"))\n",
    "\n",
    "X_std = [f\"{c}_std\" for c in X_cols]\n",
    "\n",
    "# 1) lead DV by 1 month within PERMNO\n",
    "df = df.sort([\"PERMNO\",\"date\"]).with_columns(\n",
    "    pl.col(DV).shift(-1).over(\"PERMNO\").alias(f\"{DV}_lead1\")\n",
    ")\n",
    "\n",
    "# 2) build clean table (use standardized columns)\n",
    "df = df.with_row_count(\"row_id\")\n",
    "cols_needed = [\"row_id\", f\"{DV}_lead1\"] + X_std\n",
    "clean = (\n",
    "    df.select(cols_needed)\n",
    "      # remove inf/-inf from standardized cols\n",
    "      .with_columns([pl.when(~pl.col(c).is_finite()).then(None).otherwise(pl.col(c)).alias(c) for c in X_std])\n",
    "      .drop_nulls()\n",
    ")\n",
    "\n",
    "# 3) statsmodels\n",
    "pdf = clean.to_pandas()\n",
    "y = pdf[f\"{DV}_lead1\"].astype(int)\n",
    "X = sm.add_constant(pdf[X_std].astype(float))\n",
    "logit_model = sm.Logit(y, X).fit(disp=False)\n",
    "print(logit_model.summary())\n",
    "\n",
    "# 4) predictions\n",
    "pdf[\"p_failure\"] = logit_model.predict(X)\n",
    "\n",
    "# 5) merge back\n",
    "pred_pl = pl.from_pandas(pdf[[\"row_id\",\"p_failure\"]])\n",
    "df = df.join(pred_pl, on=\"row_id\", how=\"left\").drop(\"row_id\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78bdc64d",
   "metadata": {},
   "source": [
    "NIMTAAVG – lagged net income ÷ (liabilities + market cap), 12-mo decay avg\n",
    "\n",
    "TLMTA – liabilities ÷ (liabilities + market cap)\n",
    "\n",
    "EXRETAVG – lagged excess returns vs S&P, 12-mo decay avg\n",
    "\n",
    "SIGMA – daily return volatility, past 3 months (annualized)\n",
    "\n",
    "RSIZE – log(market cap ÷ S&P500 total market cap)\n",
    "\n",
    "CASHMTA – cash ÷ (liabilities + market cap)\n",
    "\n",
    "MB – market cap ÷ book equity\n",
    "\n",
    "PRICE – log(price per share, capped at $15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00a32229",
   "metadata": {},
   "source": [
    "### Portfolio Formation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0958c47",
   "metadata": {},
   "source": [
    "100% sure that something here is wrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "394b1621",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1) grab coefficients from statsmodels\n",
    "betas = logit_model.params.to_dict()   # keys like 'const', 'NIMTAAVG_std', ...\n",
    "b0 = betas.pop(\"const\", 0.0)\n",
    "\n",
    "# 2) build the linear predictor in Polars\n",
    "linpred = pl.lit(b0)\n",
    "for name, coef in betas.items():\n",
    "    # skip any coef whose column isn't present (defensive)\n",
    "    if name in df.columns:\n",
    "        linpred = linpred + pl.col(name) * float(coef)\n",
    "\n",
    "# 3) logistic transform to get probability for every row\n",
    "df = df.with_columns(\n",
    "    (pl.lit(1.0) / (pl.lit(1.0) + (-linpred).exp())).alias(\"p_failure\")\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "08323232",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.sort([\"PERMNO\",\"date\"]).with_columns(\n",
    "    pl.col(\"p_failure\").shift(1).over(\"PERMNO\").alias(\"p_failure_lag1\")\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "4f0be222",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape: (10, 4)\n",
      "┌────────┬─────────────┬─────────────┬──────────────────┐\n",
      "│ decile ┆ ew_ret_mean ┆ vw_ret_mean ┆ avg_constituents │\n",
      "│ ---    ┆ ---         ┆ ---         ┆ ---              │\n",
      "│ i8     ┆ f64         ┆ f64         ┆ f64              │\n",
      "╞════════╪═════════════╪═════════════╪══════════════════╡\n",
      "│ 1      ┆ 0.014434    ┆ 0.010057    ┆ 114.031532       │\n",
      "│ 2      ┆ 0.015502    ┆ 0.010668    ┆ 113.495495       │\n",
      "│ 3      ┆ 0.016863    ┆ 0.009822    ┆ 112.779279       │\n",
      "│ 4      ┆ 0.017406    ┆ 0.010302    ┆ 112.792793       │\n",
      "│ 5      ┆ 0.014603    ┆ 0.008297    ┆ 112.554054       │\n",
      "│ 6      ┆ 0.013299    ┆ 0.004055    ┆ 112.914414       │\n",
      "│ 7      ┆ 0.014386    ┆ 0.001001    ┆ 112.630631       │\n",
      "│ 8      ┆ 0.01131     ┆ -0.002638   ┆ 113.441441       │\n",
      "│ 9      ┆ 0.006606    ┆ -0.008879   ┆ 113.225225       │\n",
      "│ 10     ┆ -0.000461   ┆ -0.010919   ┆ 112.328829       │\n",
      "└────────┴─────────────┴─────────────┴──────────────────┘\n",
      "shape: (1, 2)\n",
      "┌──────────────────────────┬──────────────────────────┐\n",
      "│ ew_safe_minus_distressed ┆ vw_safe_minus_distressed │\n",
      "│ ---                      ┆ ---                      │\n",
      "│ f64                      ┆ f64                      │\n",
      "╞══════════════════════════╪══════════════════════════╡\n",
      "│ 0.014895                 ┆ 0.020976                 │\n",
      "└──────────────────────────┴──────────────────────────┘\n"
     ]
    }
   ],
   "source": [
    "import polars as pl\n",
    "\n",
    "# ---------- config ----------\n",
    "signal_col = \"p_failure\"       # or \"p_failure_oos\" if you're doing true OOS scoring\n",
    "ret_col    = \"RET_adj\"         # delisting-adjusted monthly return\n",
    "price_col  = \"prc_abs\"         # abs price\n",
    "me_col     = \"mktcap\"          # market equity for VW weights\n",
    "# ----------------------------\n",
    "\n",
    "# 0) basic columns we need\n",
    "need = [\"PERMNO\",\"date\",\"SHRCD\",\"PRC\",price_col,me_col,ret_col,signal_col]\n",
    "missing = [c for c in need if c not in df.columns]\n",
    "if missing:\n",
    "    raise ValueError(f\"df missing columns: {missing}\")\n",
    "\n",
    "# (A) ensure one row per PERMNO-date before anything else\n",
    "df = (\n",
    "    df.sort([\"PERMNO\",\"date\"])\n",
    "      .unique(subset=[\"PERMNO\",\"date\"], keep=\"last\")\n",
    ")\n",
    "\n",
    "# 1) make lagged signal (info at end of month t -> used in t+1)\n",
    "df = df.with_columns(\n",
    "    pl.col(signal_col).shift(1).over(\"PERMNO\").alias(f\"{signal_col}_lag1\"),\n",
    "    pl.col(\"date\").dt.year().alias(\"year\"),\n",
    "    pl.col(\"date\").dt.month().alias(\"month\"),\n",
    ")\n",
    "\n",
    "# 2) December formation universe:\n",
    "#    common stocks, price >= $1, have lagged signal & market cap\n",
    "formation = (\n",
    "    df.filter(\n",
    "        (pl.col(\"month\") == 12)\n",
    "        & (pl.col(\"SHRCD\").is_in([10, 11]))\n",
    "        & (pl.col(price_col) >= 1.0)\n",
    "        & (pl.col(f\"{signal_col}_lag1\").is_not_null())\n",
    "        & (pl.col(me_col).is_not_null())\n",
    "    )\n",
    "    .select([\"PERMNO\",\"date\",\"year\",f\"{signal_col}_lag1\",me_col])\n",
    "    .rename({f\"{signal_col}_lag1\": \"signal_lag1\", me_col: \"me_form\"})\n",
    ")\n",
    "\n",
    "# 3) assign signal deciles within each December\n",
    "formation = (\n",
    "    formation\n",
    "    .with_columns([\n",
    "        pl.len().over(\"date\").alias(\"n_in_dec\"),\n",
    "        pl.col(\"signal_lag1\").rank(\"ordinal\").over(\"date\").alias(\"rnk\")\n",
    "    ])\n",
    "    .with_columns(\n",
    "        (((pl.col(\"rnk\") - 1) * 10 / pl.col(\"n_in_dec\")).floor() + 1)\n",
    "        .cast(pl.Int8)\n",
    "        .clip(lower_bound=1, upper_bound=10)\n",
    "        .alias(\"decile\")\n",
    "    )\n",
    "    .select([\"PERMNO\",\"date\",\"year\",\"signal_lag1\",\"me_form\",\"decile\"])\n",
    ")\n",
    "\n",
    "# 4) map formation year -> holding year (Jan–Dec next year)\n",
    "formation = formation.with_columns((pl.col(\"year\") + 1).alias(\"hold_year\"))\n",
    "\n",
    "# (B) force ONE row per (PERMNO, hold_year)\n",
    "formation_unique = (\n",
    "    formation\n",
    "    .sort([\"PERMNO\",\"hold_year\",\"date\"])      # deterministic choice\n",
    "    .group_by([\"PERMNO\",\"hold_year\"])\n",
    "    .agg([\n",
    "        pl.col(\"signal_lag1\").last().alias(\"signal_lag1\"),\n",
    "        pl.col(\"me_form\").last().alias(\"me_form\"),\n",
    "        pl.col(\"decile\").last().alias(\"decile\"),\n",
    "        pl.col(\"date\").last().alias(\"form_date\"),  # optional for audit\n",
    "    ])\n",
    ")\n",
    "\n",
    "# quick diagnostic (should be empty)\n",
    "dups_check = (\n",
    "    formation_unique.group_by([\"PERMNO\",\"hold_year\"]).len()\n",
    "    .filter(pl.col(\"len\") > 1)\n",
    ")\n",
    "if dups_check.height > 0:\n",
    "    print(\"WARNING: duplicates remain in formation_unique\\n\", dups_check.head())\n",
    "\n",
    "# 5) build holding panel and join using formation_unique  (C)\n",
    "hold_panel = (\n",
    "    df.select([\"PERMNO\",\"date\",\"year\",\"month\",ret_col,me_col])\n",
    "      .rename({me_col: \"me_month\"})\n",
    ")\n",
    "\n",
    "hold = (\n",
    "    hold_panel.join(\n",
    "        formation_unique.select([\"PERMNO\",\"hold_year\",\"decile\",\"me_form\"]),\n",
    "        left_on=[\"PERMNO\",\"year\"],\n",
    "        right_on=[\"PERMNO\",\"hold_year\"],\n",
    "        how=\"inner\",\n",
    "        validate=\"m:1\",          # should pass now\n",
    "    )\n",
    "    .filter(pl.col(\"month\").is_between(1, 12))\n",
    ")\n",
    "\n",
    "# 6) monthly portfolio returns per decile\n",
    "port_m = (\n",
    "    hold.group_by([\"date\",\"decile\"])\n",
    "        .agg([\n",
    "            pl.col(ret_col).mean().alias(\"ew_ret\"),\n",
    "            ((pl.col(ret_col) * pl.col(\"me_form\")).sum() / pl.col(\"me_form\").sum()).alias(\"vw_ret\"),\n",
    "            pl.len().alias(\"n_names\"),\n",
    "        ])\n",
    "        .sort([\"date\",\"decile\"])\n",
    ")\n",
    "\n",
    "# 7) time-series averages per decile\n",
    "port_avg = (\n",
    "    port_m.group_by(\"decile\")\n",
    "          .agg([\n",
    "              pl.col(\"ew_ret\").mean().alias(\"ew_ret_mean\"),\n",
    "              pl.col(\"vw_ret\").mean().alias(\"vw_ret_mean\"),\n",
    "              pl.col(\"n_names\").mean().alias(\"avg_constituents\"),\n",
    "          ])\n",
    "          .sort(\"decile\")\n",
    ")\n",
    "\n",
    "# 8) safe–minus–distressed (D1 - D10)\n",
    "spread = port_avg.select([\n",
    "    (pl.col(\"ew_ret_mean\").filter(pl.col(\"decile\")==1)\n",
    "     - pl.col(\"ew_ret_mean\").filter(pl.col(\"decile\")==10)).alias(\"ew_safe_minus_distressed\"),\n",
    "    (pl.col(\"vw_ret_mean\").filter(pl.col(\"decile\")==1)\n",
    "     - pl.col(\"vw_ret_mean\").filter(pl.col(\"decile\")==10)).alias(\"vw_safe_minus_distressed\"),\n",
    "])\n",
    "\n",
    "print(port_avg)\n",
    "print(spread)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "b591378b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# assumes you already have `port_m` with [\"date\",\"decile\",\"ew_ret\"]\n",
    "\n",
    "# pivot to Date x Decile\n",
    "pm = port_m.sort([\"date\",\"decile\"]).to_pandas()\n",
    "pm[\"date\"] = pd.to_datetime(pm[\"date\"])\n",
    "ew = pm.pivot(index=\"date\", columns=\"decile\", values=\"ew_ret\").sort_index()\n",
    "ew.columns = ew.columns.astype(int)\n",
    "\n",
    "ew['spread']=ew[1]-ew[10]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "3fa4c6f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#get the cumsum ret for all of the cols\n",
    "\n",
    "bins = [1,2,3,4,5,6,7,8,9,10,\"spread\"]\n",
    "for bin in bins:\n",
    "    ew[f'{bin}_cum']=ew[bin].cumsum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "ef82de5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bins = [1,2,3,4,5,6,7,8,9,10,\"spread\"]\n",
    "\n",
    "# cumulative sums\n",
    "for b in bins:\n",
    "    ew[f\"{b}_cum\"] = ew[b].cumsum()\n",
    "\n",
    "cum_cols = [f\"{b}_cum\" for b in bins]\n",
    "spread_col = \"spread_cum\"\n",
    "other_cols = [c for c in cum_cols if c != spread_col]\n",
    "\n",
    "plt.figure(figsize=(10,6))\n",
    "ax = ew[other_cols].plot(ax=plt.gca())                 # plot all except spread\n",
    "ew[spread_col].plot(ax=ax, linewidth=2.8, zorder=5,    # re-plot spread thicker\n",
    "                    label=spread_col)\n",
    "\n",
    "ax.set_title(\"Deciles Returns\")\n",
    "ax.set_xlabel(\"Date\")\n",
    "ax.set_ylabel(\"Cumulative Sum Return\")\n",
    "leg = ax.legend(loc=\"best\")\n",
    "\n",
    "# make just the spread label bold in the legend\n",
    "for txt in leg.get_texts():\n",
    "    if txt.get_text() == spread_col:\n",
    "        txt.set_fontweight(\"bold\")\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "8dd9021d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>...</th>\n",
       "      <th>4_cum</th>\n",
       "      <th>5_cum</th>\n",
       "      <th>6_cum</th>\n",
       "      <th>7_cum</th>\n",
       "      <th>8_cum</th>\n",
       "      <th>9_cum</th>\n",
       "      <th>10_cum</th>\n",
       "      <th>spread_cum</th>\n",
       "      <th>date</th>\n",
       "      <th>RF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.030759</td>\n",
       "      <td>0.022703</td>\n",
       "      <td>0.010642</td>\n",
       "      <td>0.016700</td>\n",
       "      <td>0.063215</td>\n",
       "      <td>0.032834</td>\n",
       "      <td>0.072502</td>\n",
       "      <td>0.051764</td>\n",
       "      <td>0.113168</td>\n",
       "      <td>0.078430</td>\n",
       "      <td>...</td>\n",
       "      <td>0.016700</td>\n",
       "      <td>0.063215</td>\n",
       "      <td>0.032834</td>\n",
       "      <td>0.072502</td>\n",
       "      <td>0.051764</td>\n",
       "      <td>0.113168</td>\n",
       "      <td>0.078430</td>\n",
       "      <td>-0.047672</td>\n",
       "      <td>1966-01-01</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.009973</td>\n",
       "      <td>-0.015663</td>\n",
       "      <td>-0.004206</td>\n",
       "      <td>-0.020568</td>\n",
       "      <td>0.010617</td>\n",
       "      <td>-0.000917</td>\n",
       "      <td>0.027404</td>\n",
       "      <td>0.038383</td>\n",
       "      <td>0.085760</td>\n",
       "      <td>0.067522</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.003868</td>\n",
       "      <td>0.073833</td>\n",
       "      <td>0.031916</td>\n",
       "      <td>0.099907</td>\n",
       "      <td>0.090146</td>\n",
       "      <td>0.198929</td>\n",
       "      <td>0.145952</td>\n",
       "      <td>-0.125167</td>\n",
       "      <td>1966-02-01</td>\n",
       "      <td>0.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-0.007490</td>\n",
       "      <td>-0.010656</td>\n",
       "      <td>-0.017035</td>\n",
       "      <td>-0.026918</td>\n",
       "      <td>-0.034277</td>\n",
       "      <td>-0.028089</td>\n",
       "      <td>-0.023826</td>\n",
       "      <td>-0.021774</td>\n",
       "      <td>0.018415</td>\n",
       "      <td>-0.005619</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.030786</td>\n",
       "      <td>0.039555</td>\n",
       "      <td>0.003828</td>\n",
       "      <td>0.076081</td>\n",
       "      <td>0.068373</td>\n",
       "      <td>0.217344</td>\n",
       "      <td>0.140334</td>\n",
       "      <td>-0.127038</td>\n",
       "      <td>1966-03-01</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.044768</td>\n",
       "      <td>-0.049827</td>\n",
       "      <td>-0.054623</td>\n",
       "      <td>-0.051232</td>\n",
       "      <td>-0.091399</td>\n",
       "      <td>-0.081753</td>\n",
       "      <td>-0.057072</td>\n",
       "      <td>-0.088345</td>\n",
       "      <td>-0.103320</td>\n",
       "      <td>-0.124948</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.082018</td>\n",
       "      <td>-0.051844</td>\n",
       "      <td>-0.077926</td>\n",
       "      <td>0.019008</td>\n",
       "      <td>-0.019973</td>\n",
       "      <td>0.114024</td>\n",
       "      <td>0.015386</td>\n",
       "      <td>-0.046858</td>\n",
       "      <td>1966-05-01</td>\n",
       "      <td>0.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.007513</td>\n",
       "      <td>-0.016351</td>\n",
       "      <td>-0.014323</td>\n",
       "      <td>0.006066</td>\n",
       "      <td>-0.006305</td>\n",
       "      <td>0.001270</td>\n",
       "      <td>0.014797</td>\n",
       "      <td>-0.024762</td>\n",
       "      <td>-0.018690</td>\n",
       "      <td>-0.024993</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.075952</td>\n",
       "      <td>-0.058149</td>\n",
       "      <td>-0.076656</td>\n",
       "      <td>0.033805</td>\n",
       "      <td>-0.044734</td>\n",
       "      <td>0.095334</td>\n",
       "      <td>-0.009607</td>\n",
       "      <td>-0.014351</td>\n",
       "      <td>1966-06-01</td>\n",
       "      <td>0.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>0.000575</td>\n",
       "      <td>0.011709</td>\n",
       "      <td>0.028057</td>\n",
       "      <td>0.032246</td>\n",
       "      <td>0.023159</td>\n",
       "      <td>0.034093</td>\n",
       "      <td>0.068162</td>\n",
       "      <td>0.059201</td>\n",
       "      <td>0.059628</td>\n",
       "      <td>0.064813</td>\n",
       "      <td>...</td>\n",
       "      <td>3.699692</td>\n",
       "      <td>3.045402</td>\n",
       "      <td>2.748867</td>\n",
       "      <td>2.965322</td>\n",
       "      <td>2.257362</td>\n",
       "      <td>1.275717</td>\n",
       "      <td>-0.355439</td>\n",
       "      <td>3.404062</td>\n",
       "      <td>2003-06-01</td>\n",
       "      <td>0.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>0.029404</td>\n",
       "      <td>0.044682</td>\n",
       "      <td>0.069834</td>\n",
       "      <td>0.057240</td>\n",
       "      <td>0.081214</td>\n",
       "      <td>0.071225</td>\n",
       "      <td>0.086774</td>\n",
       "      <td>0.064952</td>\n",
       "      <td>0.058064</td>\n",
       "      <td>0.084260</td>\n",
       "      <td>...</td>\n",
       "      <td>3.756931</td>\n",
       "      <td>3.126616</td>\n",
       "      <td>2.820092</td>\n",
       "      <td>3.052097</td>\n",
       "      <td>2.322314</td>\n",
       "      <td>1.333781</td>\n",
       "      <td>-0.271178</td>\n",
       "      <td>3.349205</td>\n",
       "      <td>2003-07-01</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>-0.003150</td>\n",
       "      <td>-0.012962</td>\n",
       "      <td>-0.017390</td>\n",
       "      <td>-0.011351</td>\n",
       "      <td>0.018970</td>\n",
       "      <td>0.011355</td>\n",
       "      <td>0.013161</td>\n",
       "      <td>0.053319</td>\n",
       "      <td>0.017665</td>\n",
       "      <td>0.050869</td>\n",
       "      <td>...</td>\n",
       "      <td>3.745580</td>\n",
       "      <td>3.145586</td>\n",
       "      <td>2.831447</td>\n",
       "      <td>3.065257</td>\n",
       "      <td>2.375632</td>\n",
       "      <td>1.351446</td>\n",
       "      <td>-0.220309</td>\n",
       "      <td>3.295186</td>\n",
       "      <td>2003-09-01</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>0.072517</td>\n",
       "      <td>0.076829</td>\n",
       "      <td>0.083668</td>\n",
       "      <td>0.085112</td>\n",
       "      <td>0.085594</td>\n",
       "      <td>0.086409</td>\n",
       "      <td>0.098749</td>\n",
       "      <td>0.082379</td>\n",
       "      <td>0.088061</td>\n",
       "      <td>0.105915</td>\n",
       "      <td>...</td>\n",
       "      <td>3.830692</td>\n",
       "      <td>3.231180</td>\n",
       "      <td>2.917856</td>\n",
       "      <td>3.164006</td>\n",
       "      <td>2.458012</td>\n",
       "      <td>1.439507</td>\n",
       "      <td>-0.114394</td>\n",
       "      <td>3.261788</td>\n",
       "      <td>2003-10-01</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>0.057052</td>\n",
       "      <td>0.033505</td>\n",
       "      <td>0.038095</td>\n",
       "      <td>0.033426</td>\n",
       "      <td>0.010687</td>\n",
       "      <td>0.034465</td>\n",
       "      <td>0.029639</td>\n",
       "      <td>0.052844</td>\n",
       "      <td>0.027029</td>\n",
       "      <td>0.012138</td>\n",
       "      <td>...</td>\n",
       "      <td>3.864118</td>\n",
       "      <td>3.241866</td>\n",
       "      <td>2.952321</td>\n",
       "      <td>3.193645</td>\n",
       "      <td>2.510856</td>\n",
       "      <td>1.466536</td>\n",
       "      <td>-0.102256</td>\n",
       "      <td>3.306702</td>\n",
       "      <td>2003-12-01</td>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>222 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            1         2         3         4         5         6         7  \\\n",
       "0    0.030759  0.022703  0.010642  0.016700  0.063215  0.032834  0.072502   \n",
       "1   -0.009973 -0.015663 -0.004206 -0.020568  0.010617 -0.000917  0.027404   \n",
       "2   -0.007490 -0.010656 -0.017035 -0.026918 -0.034277 -0.028089 -0.023826   \n",
       "3   -0.044768 -0.049827 -0.054623 -0.051232 -0.091399 -0.081753 -0.057072   \n",
       "4    0.007513 -0.016351 -0.014323  0.006066 -0.006305  0.001270  0.014797   \n",
       "..        ...       ...       ...       ...       ...       ...       ...   \n",
       "217  0.000575  0.011709  0.028057  0.032246  0.023159  0.034093  0.068162   \n",
       "218  0.029404  0.044682  0.069834  0.057240  0.081214  0.071225  0.086774   \n",
       "219 -0.003150 -0.012962 -0.017390 -0.011351  0.018970  0.011355  0.013161   \n",
       "220  0.072517  0.076829  0.083668  0.085112  0.085594  0.086409  0.098749   \n",
       "221  0.057052  0.033505  0.038095  0.033426  0.010687  0.034465  0.029639   \n",
       "\n",
       "            8         9        10  ...     4_cum     5_cum     6_cum  \\\n",
       "0    0.051764  0.113168  0.078430  ...  0.016700  0.063215  0.032834   \n",
       "1    0.038383  0.085760  0.067522  ... -0.003868  0.073833  0.031916   \n",
       "2   -0.021774  0.018415 -0.005619  ... -0.030786  0.039555  0.003828   \n",
       "3   -0.088345 -0.103320 -0.124948  ... -0.082018 -0.051844 -0.077926   \n",
       "4   -0.024762 -0.018690 -0.024993  ... -0.075952 -0.058149 -0.076656   \n",
       "..        ...       ...       ...  ...       ...       ...       ...   \n",
       "217  0.059201  0.059628  0.064813  ...  3.699692  3.045402  2.748867   \n",
       "218  0.064952  0.058064  0.084260  ...  3.756931  3.126616  2.820092   \n",
       "219  0.053319  0.017665  0.050869  ...  3.745580  3.145586  2.831447   \n",
       "220  0.082379  0.088061  0.105915  ...  3.830692  3.231180  2.917856   \n",
       "221  0.052844  0.027029  0.012138  ...  3.864118  3.241866  2.952321   \n",
       "\n",
       "        7_cum     8_cum     9_cum    10_cum  spread_cum       date    RF  \n",
       "0    0.072502  0.051764  0.113168  0.078430   -0.047672 1966-01-01  0.38  \n",
       "1    0.099907  0.090146  0.198929  0.145952   -0.125167 1966-02-01  0.35  \n",
       "2    0.076081  0.068373  0.217344  0.140334   -0.127038 1966-03-01  0.38  \n",
       "3    0.019008 -0.019973  0.114024  0.015386   -0.046858 1966-05-01  0.41  \n",
       "4    0.033805 -0.044734  0.095334 -0.009607   -0.014351 1966-06-01  0.38  \n",
       "..        ...       ...       ...       ...         ...        ...   ...  \n",
       "217  2.965322  2.257362  1.275717 -0.355439    3.404062 2003-06-01  0.10  \n",
       "218  3.052097  2.322314  1.333781 -0.271178    3.349205 2003-07-01  0.07  \n",
       "219  3.065257  2.375632  1.351446 -0.220309    3.295186 2003-09-01  0.08  \n",
       "220  3.164006  2.458012  1.439507 -0.114394    3.261788 2003-10-01  0.07  \n",
       "221  3.193645  2.510856  1.466536 -0.102256    3.306702 2003-12-01  0.08  \n",
       "\n",
       "[222 rows x 24 columns]"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "#load in the fama french 5 factors\n",
    "ff5=pl.read_csv(r'/home/porter77/sf_fall_2025/sf-quant-labs/ff5.csv')\n",
    "\n",
    "# assume ew is your decile return DataFrame (monthly decimal returns, not cum)\n",
    "# ensure dates align\n",
    "ew.index = pd.to_datetime(ew.index)\n",
    "\n",
    "# clean up FF5\n",
    "ff = ff5.to_pandas().copy()\n",
    "ff['date'] = pd.to_datetime(ff['date'].astype(str), format=\"%Y%m\")  # convert 196307 → 1963-07\n",
    "ff=ff[['RF','date']]\n",
    "\n",
    "ew['date']=ew.index\n",
    "ew=ew.reset_index(drop=True)\n",
    "ew['date'] = ew['date'] - pd.offsets.MonthBegin(1)\n",
    "ew=ew.merge(ff,on=['date'])\n",
    "ew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "cbb79c83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Mean_monthly  Std_monthly  Sharpe_monthly  Sharpe_annual\n",
      "1             0.0096       0.0485          0.1976         0.6846\n",
      "2             0.0107       0.0522          0.2040         0.7068\n",
      "3             0.0120       0.0549          0.2189         0.7581\n",
      "4             0.0126       0.0559          0.2246         0.7780\n",
      "5             0.0098       0.0615          0.1587         0.5498\n",
      "6             0.0085       0.0658          0.1284         0.4447\n",
      "7             0.0095       0.0665          0.1435         0.4972\n",
      "8             0.0065       0.0657          0.0984         0.3410\n",
      "9             0.0018       0.0719          0.0245         0.0848\n",
      "10           -0.0053       0.0790         -0.0672        -0.2327\n",
      "spread        0.0100       0.0650          0.1545         0.5351\n"
     ]
    }
   ],
   "source": [
    "# portfolios you want to evaluate\n",
    "bins = [1,2,3,4,5,6,7,8,9,10,\"spread\"]\n",
    "\n",
    "sharpes = {}\n",
    "\n",
    "for b in bins:\n",
    "    # excess return: portfolio - RF\n",
    "    r_excess = ew[b] - ew[\"RF\"]/100\n",
    "    \n",
    "    # monthly mean and std\n",
    "    mean_m = r_excess.mean()\n",
    "    std_m = r_excess.std(ddof=1)\n",
    "    \n",
    "    # monthly Sharpe\n",
    "    sharpe_m = mean_m / std_m if std_m > 0 else np.nan\n",
    "    \n",
    "    # annualized Sharpe (multiply by sqrt(12))\n",
    "    sharpe_a = sharpe_m * np.sqrt(12) if np.isfinite(sharpe_m) else np.nan\n",
    "    \n",
    "    sharpes[b] = {\n",
    "        \"Mean_monthly\": mean_m,\n",
    "        \"Std_monthly\": std_m,\n",
    "        \"Sharpe_monthly\": sharpe_m,\n",
    "        \"Sharpe_annual\": sharpe_a\n",
    "    }\n",
    "\n",
    "sharpe_df = pd.DataFrame(sharpes).T\n",
    "print(sharpe_df.round(4))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0040375c",
   "metadata": {},
   "source": [
    "### Simple 5 Factor Reg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "9d224e8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=== Portfolio 1 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0020      0.001      1.975      0.050    4.15e-06       0.004\n",
      "Mkt-RF         1.0666      0.023     45.845      0.000       1.021       1.112\n",
      "SMB            0.0536      0.030      1.774      0.077      -0.006       0.113\n",
      "HML            0.2482      0.047      5.289      0.000       0.156       0.341\n",
      "RMW            0.2221      0.040      5.515      0.000       0.143       0.301\n",
      "CMA            0.1002      0.069      1.446      0.150      -0.036       0.237\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 2 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0038      0.001      4.096      0.000       0.002       0.006\n",
      "Mkt-RF         1.0515      0.022     48.189      0.000       1.009       1.095\n",
      "SMB            0.3200      0.028     11.303      0.000       0.264       0.376\n",
      "HML            0.2448      0.044      5.563      0.000       0.158       0.332\n",
      "RMW           -0.0098      0.038     -0.260      0.795      -0.084       0.065\n",
      "CMA           -0.0607      0.065     -0.934      0.352      -0.189       0.067\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 3 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0040      0.001      3.703      0.000       0.002       0.006\n",
      "Mkt-RF         1.0590      0.025     42.150      0.000       1.009       1.109\n",
      "SMB            0.5583      0.033     17.125      0.000       0.494       0.623\n",
      "HML            0.2109      0.051      4.161      0.000       0.111       0.311\n",
      "RMW            0.1073      0.043      2.468      0.014       0.022       0.193\n",
      "CMA            0.0707      0.075      0.945      0.346      -0.077       0.218\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 4 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0054      0.001      5.149      0.000       0.003       0.007\n",
      "Mkt-RF         0.9995      0.024     40.966      0.000       0.951       1.048\n",
      "SMB            0.6474      0.032     20.451      0.000       0.585       0.710\n",
      "HML            0.0849      0.049      1.725      0.086      -0.012       0.182\n",
      "RMW           -0.0292      0.042     -0.692      0.489      -0.112       0.054\n",
      "CMA            0.1068      0.073      1.470      0.143      -0.036       0.250\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 5 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0020      0.001      1.685      0.093      -0.000       0.004\n",
      "Mkt-RF         1.0394      0.027     37.826      0.000       0.985       1.094\n",
      "SMB            0.8298      0.036     23.274      0.000       0.760       0.900\n",
      "HML            0.1381      0.055      2.491      0.013       0.029       0.247\n",
      "RMW            0.0009      0.048      0.018      0.985      -0.093       0.095\n",
      "CMA            0.0300      0.082      0.366      0.715      -0.131       0.191\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 6 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0003      0.001      0.216      0.829      -0.003       0.003\n",
      "Mkt-RF         1.0591      0.033     31.768      0.000       0.993       1.125\n",
      "SMB            0.9431      0.043     21.803      0.000       0.858       1.028\n",
      "HML           -0.0030      0.067     -0.044      0.965      -0.135       0.130\n",
      "RMW            0.0223      0.058      0.386      0.700      -0.091       0.136\n",
      "CMA            0.1639      0.099      1.651      0.100      -0.032       0.360\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 7 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0009      0.002      0.606      0.545      -0.002       0.004\n",
      "Mkt-RF         0.9890      0.036     27.682      0.000       0.919       1.059\n",
      "SMB            1.1336      0.046     24.454      0.000       1.042       1.225\n",
      "HML            0.2057      0.072      2.855      0.005       0.064       0.348\n",
      "RMW            0.0882      0.062      1.427      0.155      -0.034       0.210\n",
      "CMA            0.0291      0.106      0.274      0.784      -0.181       0.239\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 8 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         -0.0013      0.002     -0.685      0.494      -0.005       0.002\n",
      "Mkt-RF         0.9296      0.044     21.277      0.000       0.843       1.016\n",
      "SMB            1.0613      0.057     18.721      0.000       0.950       1.173\n",
      "HML            0.1477      0.088      1.676      0.095      -0.026       0.321\n",
      "RMW           -0.0060      0.076     -0.079      0.937      -0.155       0.143\n",
      "CMA            0.0527      0.130      0.405      0.686      -0.204       0.309\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 9 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         -0.0059      0.002     -2.665      0.008      -0.010      -0.002\n",
      "Mkt-RF         0.9268      0.052     17.790      0.000       0.824       1.029\n",
      "SMB            1.2140      0.068     17.959      0.000       1.081       1.347\n",
      "HML            0.2891      0.105      2.751      0.006       0.082       0.496\n",
      "RMW           -0.0265      0.090     -0.294      0.769      -0.204       0.151\n",
      "CMA           -0.1704      0.155     -1.098      0.273      -0.476       0.135\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio 10 ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const         -0.0124      0.003     -4.668      0.000      -0.018      -0.007\n",
      "Mkt-RF         0.9183      0.062     14.849      0.000       0.796       1.040\n",
      "SMB            1.2706      0.080     15.834      0.000       1.112       1.429\n",
      "HML            0.0753      0.125      0.604      0.547      -0.171       0.321\n",
      "RMW           -0.2989      0.107     -2.793      0.006      -0.510      -0.088\n",
      "CMA            0.0778      0.184      0.422      0.673      -0.285       0.441\n",
      "==============================================================================\n",
      "\n",
      "\n",
      "=== Portfolio spread ===\n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          0.0094      0.003      3.280      0.001       0.004       0.015\n",
      "Mkt-RF         0.1532      0.067      2.286      0.023       0.021       0.285\n",
      "SMB           -1.2106      0.087    -13.920      0.000      -1.382      -1.039\n",
      "HML            0.1587      0.135      1.174      0.242      -0.108       0.425\n",
      "RMW            0.5344      0.116      4.607      0.000       0.306       0.763\n",
      "CMA            0.0339      0.200      0.170      0.865      -0.359       0.427\n",
      "==============================================================================\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import statsmodels.api as sm\n",
    "import pandas as pd\n",
    "\n",
    "# --- Clean up FF5 ---\n",
    "ff = ff5.to_pandas().copy()\n",
    "ff[\"date\"] = pd.to_datetime(ff[\"date\"].astype(str), format=\"%Y%m\")  # YYYYMM → datetime\n",
    "ff = ff.set_index(\"date\")  # make date the index\n",
    "ff = ff / 100.0   # convert % → decimals\n",
    "\n",
    "# --- Align with ew returns ---\n",
    "ew = ew.copy()\n",
    "ew = ew.set_index(\"date\")  # make sure ew also has datetime index\n",
    "ew, ff = ew.align(ff, join=\"inner\", axis=0)  # intersection of dates\n",
    "\n",
    "# --- Factors ---\n",
    "factors = ff[[\"Mkt-RF\",\"SMB\",\"HML\",\"RMW\",\"CMA\"]]\n",
    "rf = ff[\"RF\"]\n",
    "\n",
    "results = {}\n",
    "for b in bins:\n",
    "    y = ew[b] - rf  # excess portfolio return\n",
    "    X = sm.add_constant(factors)\n",
    "    model = sm.OLS(y, X).fit()\n",
    "    results[b] = {\n",
    "        \"alpha\": model.params[\"const\"],\n",
    "        \"alpha_t\": model.tvalues[\"const\"],\n",
    "        \"R2\": model.rsquared\n",
    "    }\n",
    "    print(f\"=== Portfolio {b} ===\")\n",
    "    print(model.summary().tables[1])  # coefficients table\n",
    "    print(\"\\n\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "081f60be",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>spread</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>const</th>\n",
       "      <td>0.002 (1.98)</td>\n",
       "      <td>0.0038 (4.1)</td>\n",
       "      <td>0.004 (3.7)</td>\n",
       "      <td>0.0054 (5.15)</td>\n",
       "      <td>0.002 (1.69)</td>\n",
       "      <td>0.0003 (0.22)</td>\n",
       "      <td>0.0009 (0.61)</td>\n",
       "      <td>-0.0013 (-0.69)</td>\n",
       "      <td>-0.0059 (-2.67)</td>\n",
       "      <td>-0.0124 (-4.67)</td>\n",
       "      <td>0.0094 (3.28)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mkt-RF</th>\n",
       "      <td>1.0666 (45.84)</td>\n",
       "      <td>1.0515 (48.19)</td>\n",
       "      <td>1.059 (42.15)</td>\n",
       "      <td>0.9995 (40.97)</td>\n",
       "      <td>1.0394 (37.83)</td>\n",
       "      <td>1.0591 (31.77)</td>\n",
       "      <td>0.989 (27.68)</td>\n",
       "      <td>0.9296 (21.28)</td>\n",
       "      <td>0.9268 (17.79)</td>\n",
       "      <td>0.9183 (14.85)</td>\n",
       "      <td>0.1532 (2.29)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SMB</th>\n",
       "      <td>0.0536 (1.77)</td>\n",
       "      <td>0.32 (11.3)</td>\n",
       "      <td>0.5583 (17.12)</td>\n",
       "      <td>0.6474 (20.45)</td>\n",
       "      <td>0.8298 (23.27)</td>\n",
       "      <td>0.9431 (21.8)</td>\n",
       "      <td>1.1336 (24.45)</td>\n",
       "      <td>1.0613 (18.72)</td>\n",
       "      <td>1.214 (17.96)</td>\n",
       "      <td>1.2706 (15.83)</td>\n",
       "      <td>-1.2106 (-13.92)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HML</th>\n",
       "      <td>0.2482 (5.29)</td>\n",
       "      <td>0.2448 (5.56)</td>\n",
       "      <td>0.2109 (4.16)</td>\n",
       "      <td>0.0849 (1.73)</td>\n",
       "      <td>0.1381 (2.49)</td>\n",
       "      <td>-0.003 (-0.04)</td>\n",
       "      <td>0.2057 (2.85)</td>\n",
       "      <td>0.1477 (1.68)</td>\n",
       "      <td>0.2891 (2.75)</td>\n",
       "      <td>0.0753 (0.6)</td>\n",
       "      <td>0.1587 (1.17)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RMW</th>\n",
       "      <td>0.2221 (5.52)</td>\n",
       "      <td>-0.0098 (-0.26)</td>\n",
       "      <td>0.1073 (2.47)</td>\n",
       "      <td>-0.0292 (-0.69)</td>\n",
       "      <td>0.0009 (0.02)</td>\n",
       "      <td>0.0223 (0.39)</td>\n",
       "      <td>0.0882 (1.43)</td>\n",
       "      <td>-0.006 (-0.08)</td>\n",
       "      <td>-0.0265 (-0.29)</td>\n",
       "      <td>-0.2989 (-2.79)</td>\n",
       "      <td>0.5344 (4.61)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CMA</th>\n",
       "      <td>0.1002 (1.45)</td>\n",
       "      <td>-0.0607 (-0.93)</td>\n",
       "      <td>0.0707 (0.94)</td>\n",
       "      <td>0.1068 (1.47)</td>\n",
       "      <td>0.03 (0.37)</td>\n",
       "      <td>0.1639 (1.65)</td>\n",
       "      <td>0.0291 (0.27)</td>\n",
       "      <td>0.0527 (0.41)</td>\n",
       "      <td>-0.1704 (-1.1)</td>\n",
       "      <td>0.0778 (0.42)</td>\n",
       "      <td>0.0339 (0.17)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     1                2               3                4  \\\n",
       "const     0.002 (1.98)     0.0038 (4.1)     0.004 (3.7)    0.0054 (5.15)   \n",
       "Mkt-RF  1.0666 (45.84)   1.0515 (48.19)   1.059 (42.15)   0.9995 (40.97)   \n",
       "SMB      0.0536 (1.77)      0.32 (11.3)  0.5583 (17.12)   0.6474 (20.45)   \n",
       "HML      0.2482 (5.29)    0.2448 (5.56)   0.2109 (4.16)    0.0849 (1.73)   \n",
       "RMW      0.2221 (5.52)  -0.0098 (-0.26)   0.1073 (2.47)  -0.0292 (-0.69)   \n",
       "CMA      0.1002 (1.45)  -0.0607 (-0.93)   0.0707 (0.94)    0.1068 (1.47)   \n",
       "\n",
       "                     5               6               7                8  \\\n",
       "const     0.002 (1.69)   0.0003 (0.22)   0.0009 (0.61)  -0.0013 (-0.69)   \n",
       "Mkt-RF  1.0394 (37.83)  1.0591 (31.77)   0.989 (27.68)   0.9296 (21.28)   \n",
       "SMB     0.8298 (23.27)   0.9431 (21.8)  1.1336 (24.45)   1.0613 (18.72)   \n",
       "HML      0.1381 (2.49)  -0.003 (-0.04)   0.2057 (2.85)    0.1477 (1.68)   \n",
       "RMW      0.0009 (0.02)   0.0223 (0.39)   0.0882 (1.43)   -0.006 (-0.08)   \n",
       "CMA        0.03 (0.37)   0.1639 (1.65)   0.0291 (0.27)    0.0527 (0.41)   \n",
       "\n",
       "                      9               10            spread  \n",
       "const   -0.0059 (-2.67)  -0.0124 (-4.67)     0.0094 (3.28)  \n",
       "Mkt-RF   0.9268 (17.79)   0.9183 (14.85)     0.1532 (2.29)  \n",
       "SMB       1.214 (17.96)   1.2706 (15.83)  -1.2106 (-13.92)  \n",
       "HML       0.2891 (2.75)     0.0753 (0.6)     0.1587 (1.17)  \n",
       "RMW     -0.0265 (-0.29)  -0.2989 (-2.79)     0.5344 (4.61)  \n",
       "CMA      -0.1704 (-1.1)    0.0778 (0.42)     0.0339 (0.17)  "
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import statsmodels.api as sm\n",
    "\n",
    "# --- Factors ---\n",
    "factors = ff[[\"Mkt-RF\",\"SMB\",\"HML\",\"RMW\",\"CMA\"]]\n",
    "rf = ff[\"RF\"]\n",
    "\n",
    "# store regression outputs\n",
    "coefs = {}\n",
    "tstats = {}\n",
    "\n",
    "for b in bins:\n",
    "    y = ew[b] - rf  # excess return\n",
    "    X = sm.add_constant(factors)\n",
    "    model = sm.OLS(y, X).fit()\n",
    "    \n",
    "    coefs[b] = model.params\n",
    "    tstats[b] = model.tvalues\n",
    "\n",
    "# convert dicts to DataFrames\n",
    "coef_df = pd.DataFrame(coefs).reindex([\"const\",\"Mkt-RF\",\"SMB\",\"HML\",\"RMW\",\"CMA\"])\n",
    "tstat_df = pd.DataFrame(tstats).reindex([\"const\",\"Mkt-RF\",\"SMB\",\"HML\",\"RMW\",\"CMA\"])\n",
    "\n",
    "# round for display\n",
    "coef_df = coef_df.round(4)\n",
    "tstat_df = tstat_df.round(2)\n",
    "\n",
    "# stack into a single table: coef with t-stat in parentheses\n",
    "table = coef_df.astype(str) + \" (\" + tstat_df.astype(str) + \")\"\n",
    "\n",
    "table"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ccd5f65",
   "metadata": {},
   "source": [
    "### Things to Do/Research"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19ca2056",
   "metadata": {},
   "source": [
    "- Read the paper all the way \n",
    "- Test other ways to generate probablity of failure/bankruptcy (ML, DL, other regression?)\n",
    "- Test other holding periods (monthly rebalance primarily)\n",
    "- Test out of sample"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39f42d3a",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "sf-quant-labs (3.13.3)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
